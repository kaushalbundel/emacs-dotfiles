<p>People change their names for all sorts of reasons. They get married, they transition, or they just decide a different name better suits them. When this happens, things break. Recently I talked about how <a href="/blog/email-address-not-identifier/">email address changes break things</a>. Today it's how to fix this issue with git.</p>
<p>We use git at work. After I came out at work, it was a game of whack-a-mole to find all the deadname instances. One of my coworkers pointed out that my deadname was all over our commit logs.</p>
<p><em>All</em> over them.</p>
<p>I have the most lines of code committed in our organization.
Many editors show the author and commit message for line that you're on.
That means...
Deadname, constantly.</p>
<p><em>YIKES</em>.</p>
<p>In other applications, you can just change your name.
In git, the history is meant to be immutable, so a record of old names is just... there.
You could rewrite history, but in a team setting that sort of rebasing isn't really tenable.
You just cannot stop the world long enough to make it happen.</p>
<p>Fortunately, we can paper over it by using <a href="https://git-scm.com/docs/gitmailmap">git mailmap</a><sup class="footnote-reference"><a href="#1">1</a></sup>.
This lets you replace the name and email addresses on commits with the correct ones.
It's pretty straightforward.</p>
<p>You create a file called <code>.mailmap</code> in the root of your repository.
In it, each line says how to remap an email address (blank lines are ignored, and <code>#</code> begins comments).
There are a few different ways you can do this, which are provided in the docs.
There's one that I think is the most useful, though.
You list the correct name, followed by the correct email address inside <code>&lt;&gt;</code>, followed by the email address on the commits to map (also inside <code>&lt;&gt;</code>).</p>
<p>For example, here's a snippet of a mailmap file I setup at work (with a few lines redacted, for reasons):</p>
<pre><code>Nicole Tietz-Sokolskaya &lt;me@ntietz.com&gt; &lt;nicole@remesh.org&gt;
Nicole Tietz-Sokolskaya &lt;me@ntietz.com&gt; &lt;me@ntietz.com&gt;
Nicole Tietz-Sokolskaya &lt;me@ntietz.com&gt; &lt;ntietz@gmail.com&gt;
</code></pre>
<p>This standardizes all my commits to display my current name and my current email address, and all the tools seem to pick this up pretty seamlessly.</p>
<p>To find your email addresses to change, you can use grep. I ran something like this, with my deadname subbed in:</p>
<pre><code>git log | grep &quot;Author&quot; | grep DeadFirstName
</code></pre>
<p>There was another person in the history with the same first name, but it was easy enough to ignore those entries.
Then I wrote the mailmap file you see above (plus a few other lines; why did my config change so many times in 6 years??).
The last step was confirming that it worked:</p>
<pre><code>git log | grep &quot;Author&quot; | grep Nicole | sort -u
</code></pre>
<p>This comes back with just one line, reflecting my name and email, so everything worked!</p>
<p>We can do better, though.
This can be wrapped up in one small script.</p>
<pre data-lang="bash" class="language-bash "><code class="language-bash" data-lang="bash">#!&#x2F;bin&#x2F;bash
# file: mailmap-deadname.sh
set -e

if [ $# -ne 3 ]; then
    echo &quot;Usage: $0 &lt;deadname&gt; &lt;name&gt; &lt;email&gt;&quot;
    exit 1
fi

git log --format=&quot;%aN &lt;$3&gt; &lt;%aE&gt;&quot; | grep &quot;$1&quot; | sort -u | sed -e &quot;s&#x2F;$1&#x2F;$2&#x2F;g&quot; &gt;&gt; .mailmap
</code></pre>
<p>To use it, you run something like <code>./mailmap-deadname.sh 'Dead Name' 'Nicole Tietz-Sokolskaya' 'me@ntietz.com'</code> and it appends the lines it needs into the mailmap file, and voila, you're done.
Make sure you commit the mailmap file so that it's reflected in your coworkers' git logs, too!</p>
<hr />
<div class="footnote-definition" id="1"><sup class="footnote-definition-label">1</sup>
<p>It <em>does</em> make me slightly uncomfortable still that my name is forever in the history of this and other repositories. It's not a problem necessarily, but just something there that lingers, always waiting, will it pop out? Will the neighborhood transphobe discover it?</p>
</div>
