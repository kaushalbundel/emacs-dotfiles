<div>  <p>I was writing some Ruby for the first time, and I made a hashmap with some data in it.</p>  <pre>    <code class="code-ruby">map1 = {"foo": 1, "bar": 2}    </code>  </pre>  <p>I was then surprised to find out that I couldn't get any items out of it.</p>  <pre>    <code class="code-ruby">&gt; map1 = {"foo": 1, "bar": 2}&gt; map1["foo"]=&gt; nil    </code>  </pre>  <p>Heck, it didn't even seem to have the key stored in it!</p>  <pre>    <code class="code-ruby">&gt; map1 = {"foo": 1, "bar": 2}&gt; map1.has_key?("foo")=&gt; false    </code>  </pre>  <p>So I dug a bit into <a href="https://ruby-doc.org/3.2.2/Hash.html#class-Hash-label-Hash+Data+Syntax">the documentation</a>. The problem is there are two syntaxes for creating hashmap literals, a json-like syntax, and what Ruby calls the <em>"rocket"</em> syntax.</p>  <pre>    <code class="code-ruby">map1 = {"foo": 1, "bar": 2}     # the json-like syntaxmap2 = {"foo" =&gt; 1, "bar" =&gt; 2} # "rocket" syntax    </code>  </pre>  <p>The json-like syntax is newer, and is the cause of my confusion. It silently converts each string key to a symbol.</p>  <pre>    <code class="code-ruby">&gt; map1 = {"foo": 1, "bar": 2}&gt; map1.keys=&gt; [:foo, :bar]    </code>  </pre>  <p>The rocket syntax doesn't!</p>  <pre>    <code class="code-ruby">&gt; map2 = {"foo" =&gt; 1, "bar" =&gt; 2}&gt; map2.keys=&gt; ["foo", "bar"]    </code>  </pre>  <p>So, for any maps created by the json-like syntax, they must be accessed with symbols.</p>  <pre>    <code class="code-ruby">&gt; map1 = {"foo": 1, "bar": 2}&gt; map1[:foo]=&gt; 1    </code>  </pre>  <p>Or, just create them with the rocket syntax, and you can access them with strings. Like you expect.</p>  <p>I don't understand why this is the case. This conversion is surprising, especially since the json-like syntax is a <em>newer</em> addition to Ruby.</p></div>