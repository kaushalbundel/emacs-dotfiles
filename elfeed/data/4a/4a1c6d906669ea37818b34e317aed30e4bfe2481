<p>The <code class="language-plaintext highlighter-rouge">standard-themes</code> are a pair of light and dark themes for GNU
Emacs. They emulate the out-of-the-box looks of Emacs (which
technically do NOT constitute a theme) while bringing to them thematic
consistency, customizability, and extensibility. In practice, the
Standard themes take the default style of the font-lock and Org faces,
complement it with a wider and harmonious colour palette, address many
inconsistencies, and apply established semantic patterns across all
interfaces by supporting a large number of packages.</p>

<ul>
  <li>Package name (GNU ELPA): <code class="language-plaintext highlighter-rouge">standard-themes</code></li>
  <li>Official manual: <a href="https://protesilaos.com/emacs/standard-themes">https://protesilaos.com/emacs/standard-themes</a></li>
  <li>Change log: <a href="https://protesilaos.com/emacs/standard-themes-changelog">https://protesilaos.com/emacs/standard-themes-changelog</a></li>
  <li>Git repo on SourceHut: <a href="https://git.sr.ht/~protesilaos/standard-themes">https://git.sr.ht/~protesilaos/standard-themes</a>
    <ul>
      <li>Mirrors:
        <ul>
          <li>GitHub: <a href="https://github.com/protesilaos/standard-themes">https://github.com/protesilaos/standard-themes</a></li>
          <li>GitLab: <a href="https://gitlab.com/protesilaos/standard-themes">https://gitlab.com/protesilaos/standard-themes</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Mailing list: <a href="https://lists.sr.ht/~protesilaos/standard-themes">https://lists.sr.ht/~protesilaos/standard-themes</a></li>
  <li>Backronym: Standard Themes Are Not Derivatives but the
Affectionately Reimagined Default … themes.</li>
</ul>

<p>Below are the release notes.</p>

<hr />

<h2>Deprecated several user options that changed colours</h2>

<p>The following user options are deprecated in favour of palette
overrides (more in the following section):</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">standard-themes-mode-line-accented</code></li>
  <li><code class="language-plaintext highlighter-rouge">standard-themes-links</code></li>
  <li><code class="language-plaintext highlighter-rouge">standard-themes-region</code></li>
  <li><code class="language-plaintext highlighter-rouge">standard-themes-fringes</code></li>
</ul>

<p>In the same spirit, the user option <code class="language-plaintext highlighter-rouge">standard-themes-prompts</code> no
longer affects colours.</p>

<h2>All colour-related tweaks are done via palette overrides</h2>

<p>In previous versions of the themes, we provided certain hardcoded
colour variations, such as for an “accented” mode line and more
“intense” fringes. We no longer do so, in favour of a more flexible
approach that empowers the user to pick the exact colour they like.</p>

<p>The Standard themes provide the means to override every entry in their
palette. Each palette defines named faces (such as what is the exact
hexademical Red-Green-Blue value of <code class="language-plaintext highlighter-rouge">blue-warmer</code>) as well as semantic
colour mappings (like <code class="language-plaintext highlighter-rouge">bg-mode-line-active</code>). Users can configure
either the <code class="language-plaintext highlighter-rouge">standard-themes-common-palette-overrides</code> or the
theme-specific ones, <code class="language-plaintext highlighter-rouge">standard-dark-palette-overrides</code>,
<code class="language-plaintext highlighter-rouge">standard-light-palette-overrides</code>.</p>

<p>Refer to the manual for how this can be done:
<a href="https://protesilaos.com/emacs/standard-themes#h:34fe0582-960b-45dc-af5d-23c8f3e9d724">https://protesilaos.com/emacs/standard-themes#h:34fe0582-960b-45dc-af5d-23c8f3e9d724</a>.
And/or use the commands to preview the palette:
<code class="language-plaintext highlighter-rouge">standard-themes-preview-colors</code>,
<code class="language-plaintext highlighter-rouge">standard-themes-preview-colors-current</code>. Below is a sample:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">standard-themes-common-palette-overrides</span>
      <span class="o">'</span><span class="p">((</span><span class="nv">cursor</span> <span class="nv">red-warmer</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">bg-mode-line-active</span> <span class="nv">bg-blue-subtle</span><span class="p">)))</span>
</code></pre></div></div>

<p>[ This is the same functionality found in my <code class="language-plaintext highlighter-rouge">modus-themes</code> and
  <code class="language-plaintext highlighter-rouge">ef-themes</code>. Modus has the most palette entries and widest package
  support due to its maximalist scope. ]</p>

<h2>The <code class="language-plaintext highlighter-rouge">standard-themes-prompts</code> accept any typographic weight</h2>

<p>This user option applies to prompt texts of all sorts, such as the
minibuffer and command-line shells. It now accepts any supported
typographic weight as part of its value. The list of weights are
recorded in the documentation of the variable
<code class="language-plaintext highlighter-rouge">standard-themes-weights</code> as well as the manual.</p>

<h2>Headings have more semantic colour mappings associated with them</h2>

<p>Apart from the foreground, each heading level from 0 to 8 now has a
background and an overline. These new palette entries are set to the
<code class="language-plaintext highlighter-rouge">unspecified</code> value, meaning that they do not have any visual effect.
Users can set them to a colour via palette overrides to have headings
with a background and/or an overline (per heading level).</p>

<p>Building on the previous sample code with the overrides:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">standard-themes-common-palette-overrides</span>
      <span class="o">'</span><span class="p">((</span><span class="nv">cursor</span> <span class="nv">red-warmer</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">bg-mode-line-active</span> <span class="nv">bg-blue-subtle</span><span class="p">)</span>

        <span class="c1">;; Extra space for didactic purposes</span>

        <span class="p">(</span><span class="nv">fg-heading-1</span> <span class="nv">rainbow-1</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">fg-heading-2</span> <span class="nv">rainbow-2</span><span class="p">)</span>

        <span class="p">(</span><span class="nv">bg-heading-1</span> <span class="nv">bg-blue-nuanced</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">bg-heading-2</span> <span class="nv">bg-yellow-nuanced</span><span class="p">)</span>

        <span class="p">(</span><span class="nv">overline-heading-1</span> <span class="nv">blue-faint</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">overline-heading-2</span> <span class="nv">yellow-faint</span><span class="p">)</span>

        <span class="p">))</span>
</code></pre></div></div>

<p>Always remember to reload the theme for changes to take effect.</p>

<p>Contact me if you need any help.</p>

<h2>Space-related semantic colour mappings are available</h2>

<p>The <code class="language-plaintext highlighter-rouge">whitespace-mode</code> and related faces now use new palette entries
that are specific to them. This means that users can easily make space
characters more intense/subtle. As part of this redesign, the
background that was enabled by default is now removed to accommodate
uses of <code class="language-plaintext highlighter-rouge">whitespace-mode</code> in spacing-sensitive programming modes: an
intensely coloured background on every space makes it hard to edit the
text.</p>

<h2>The <code class="language-plaintext highlighter-rouge">display-line-numbers-mode</code> benefits from semantic colour mappings</h2>

<p>A new subset of palette entries applies to line numbers. It covers
foreground and background values for the current/other line numbers.
Users can style them as they see fit by using palette overrides. For
example, this makes line numbers have a subtle grey backgrounds to not
be mistaken for the contents of the buffer:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">standard-themes-common-palette-overrides</span>
      <span class="o">'</span><span class="p">((</span><span class="nv">cursor</span> <span class="nv">red-warmer</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">bg-mode-line-active</span> <span class="nv">bg-blue-subtle</span><span class="p">)</span>

        <span class="c1">;; Extra space for didactic purposes</span>

        <span class="p">(</span><span class="nv">fg-heading-1</span> <span class="nv">rainbow-1</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">fg-heading-2</span> <span class="nv">rainbow-2</span><span class="p">)</span>

        <span class="p">(</span><span class="nv">bg-heading-1</span> <span class="nv">bg-blue-nuanced</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">bg-heading-2</span> <span class="nv">bg-yellow-nuanced</span><span class="p">)</span>

        <span class="p">(</span><span class="nv">overline-heading-1</span> <span class="nv">blue-faint</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">overline-heading-2</span> <span class="nv">yellow-faint</span><span class="p">)</span>

        <span class="p">(</span><span class="nv">bg-line-number-active</span> <span class="nv">bg-active</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">bg-line-number-inactive</span> <span class="nv">bg-dim</span><span class="p">)</span>

        <span class="p">))</span>
</code></pre></div></div>

<h2>More semantic colour mappings for dates</h2>

<p>The palette of each theme now defines an expanded subset of entries
for dates. These include, among others, what we find in the Org agenda
and the <code class="language-plaintext highlighter-rouge">M-x calendar</code>, such as <code class="language-plaintext highlighter-rouge">date-weekday</code>, <code class="language-plaintext highlighter-rouge">date-scheduled</code>, and
more. Use palette overrides to tweak them accordingly.</p>

<h2>More packages are supported</h2>

<p>Support for more packages means that the theme looks consistent across
a variety of interfaces (this is, after all, the original idea behind
the <code class="language-plaintext highlighter-rouge">standard-themes</code> otherwise an unthemed Emacs looks too
inconsistent—sorry!). For this version, we include the following in
an already long list:</p>

<ul>
  <li>breadcrumb</li>
  <li>centaur-tabs</li>
  <li>corfu-candidate-overlay</li>
  <li>jit-spell</li>
  <li>nerd-icons</li>
  <li>nerd-icons-dired</li>
  <li>nerd-icons-ibuffer</li>
  <li>vundo</li>
  <li>which-key</li>
</ul>

<h2>Ediff faces do not implicitly depend on diff-mode</h2>

<p>The Ediff faces used to inherit from the built-in <code class="language-plaintext highlighter-rouge">diff-mode</code>. This
introduced a dependency and so using something like <code class="language-plaintext highlighter-rouge">M-x ediff-files</code>
before loading <code class="language-plaintext highlighter-rouge">diff-mode</code> would result in an error. Ediff faces are
thus designed to stand on their own.</p>

<h2>“Flagged” and “trashed” emails are now distinct</h2>

<p>They used to have the same colour, but this is no more. The change
covers the <code class="language-plaintext highlighter-rouge">mu4e</code> and <code class="language-plaintext highlighter-rouge">notmuch</code> packages.</p>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Revised the colour value of the <code class="language-plaintext highlighter-rouge">standard-dark</code> <code class="language-plaintext highlighter-rouge">bg-region</code> palette
entry. The previous one was the same as the original colour used by
the <code class="language-plaintext highlighter-rouge">region</code> face against a dark background: an intense blue. The
new value is still blue, though it is toned down to do what it needs
to do without exaggerations. (Remember that the point of the
<code class="language-plaintext highlighter-rouge">standard-themes</code> is to be faithful to the defaults, but I still
apply judgement where I think improvements can be made without
changing the character of the themes).</p>
  </li>
  <li>
    <p>Added support for the <code class="language-plaintext highlighter-rouge">appt-notification</code> face (which I introduced
in Emacs 30).</p>
  </li>
  <li>
    <p>Extended support for the various <code class="language-plaintext highlighter-rouge">flymake</code> “echo” and “end of line”
faces (e.g. <code class="language-plaintext highlighter-rouge">flymake-error-echo</code>, <code class="language-plaintext highlighter-rouge">flymake-end-of-line-diagnostics-face</code>).</p>
  </li>
  <li>
    <p>Removed the deprecated <code class="language-plaintext highlighter-rouge">consult-preview-cursor</code> face. This was done
in commit <code class="language-plaintext highlighter-rouge">267b0c9</code> on the Consult Git repository. Discussed here:
<a href="https://github.com/minad/consult/issues/764#issuecomment-1537491625">https://github.com/minad/consult/issues/764#issuecomment-1537491625</a>.</p>
  </li>
  <li>
    <p>Revised colours used in the <code class="language-plaintext highlighter-rouge">all-the-icons</code> faces. They now look
more consistent.</p>
  </li>
  <li>
    <p>Deleted the underline from the <code class="language-plaintext highlighter-rouge">org-ellipsis</code> face. Org files are
already too busy and we do not need more of that.</p>
  </li>
  <li>
    <p>Made the <code class="language-plaintext highlighter-rouge">eglot-diagnostic-tag-unnecessary-face</code> look like a
warning. By default it inherits the ‘shadow’ face, which makes it
counter-intuitive as it dims the text instead of bringing it to our
attention. The intent of <code class="language-plaintext highlighter-rouge">eglot-diagnostic-tag-unnecessary-face</code> is
to highlight unused symbols, so this is better presented as a
warning.</p>

    <p>Thanks to Augusto Stoffel for bringing this matter to my attention.
This was done via a private channel and the information is shared
with permission.</p>
  </li>
  <li>
    <p>Rewrote most of the manual to remove the deprecated user options,
expand the documentation where necessary, and tweak the sample
configuration.</p>
  </li>
  <li>
    <p>Expanded the <code class="language-plaintext highlighter-rouge">deftheme</code> definition of each theme’s metadata. This is
to support new features in Emacs where themes can specify the set
they belong to, as well as whether they are light or dark. The
built-in command is <code class="language-plaintext highlighter-rouge">theme-choose-variant</code>. This is in response to
Emacs bug#65468: <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=65468">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=65468</a>.
Thanks to Mauro Aranda for bringing this matter to my attention.</p>
  </li>
  <li>
    <p>Replaced function calls that depended on <code class="language-plaintext highlighter-rouge">cl-lib.el</code> with equivalent
ones from <code class="language-plaintext highlighter-rouge">seq.el</code>. The latter is loaded by default and we did not
need the CL features, anyway.</p>
  </li>
</ul>