<figure><img src="https://emacs.dyerdwelling.family/ox-hugo/20240309130457-emacs--kmonad-sway-kbd-map-locking.jpg" width="100%" />
</figure>

<p>I spend many hours living in emacs and a large proportion of this time is using a laptop.  Recently I have been thinking about my hands and how to protect them from any future pain or RSI.</p>
<p>Emacs out of the box can be a little, lets say <del>tortuous</del> awkward.  For example I’ve always found the default keybindings for switching windows (`C-x o`) and saving buffers (`C-x C-s`) to be particularly uncomfortable, a feeling exacerbated by their frequent use. Also, key presses in Emacs typically involve key chording, this means that not only do you have to contort your hand into awkward positions, but you also have to press keys simultaneously thus reducing the possibility for natural hand movement during key activation.</p>
<p>The concept of C-x, especially for a Control key not mapped to the Caps Lock can really take its toll over a number of years; as of yet I am fortunate not to have yet experienced any hand pain but from what I’ve read, it’s not uncommon for discomfort to start to set in after many years of daily keyboard use, so I really want to take measures now.</p>
<p>In a previous post I had started to discuss this topic :</p>
<p><a href="https://emacs.dyerdwelling.family/emacs/20240308115556-emacs--sticky-keys-on-sway-using-kmonad/">Sticky Keys on Sway using kmonad</a></p>
<p>I attempted to use the cross platform tool <strong>kmonad</strong> to apply Sticky Key functionality thus obviating the need for multiple key chord activation in emacs.  For the most part a basic latched sticky concept works well and is easy to set up, however when using emacs I think a <strong>locking</strong> sticky modifier would be a much better fit, which is where a modifier will be locked on a double tap and then unlocked with a single tap.</p>
<p>For instance, if I could lock the Control key, navigating a buffer could be done with single key presses using ’n’, ‘p’, ‘b’, and ‘f’. Deleting multiple lines, a task I frequently do, would then require only individual presses of the ‘k’ key. To mark a selection, I could simply tap the space-bar and then use single navigation keys to expand the selection. A single tap of the Control key would then deactivate the lock.</p>
<p>Unfortunately <strong>kmonad</strong> doesn’t yet support this kind of sticky key locking functionality, however my attempts at finding a workaround led me to stumble into the murky arcane world of the x keyboard extension!</p>
<p>An XKB (X Keyboard Extension) file format is essentially a descriptive language that allows you to define the behaviour of the keyboard on linux.  This includes the mapping of physical keys to symbols (characters or functions), modifying the action of keys depending on other keys that are held down (modifiers like Shift, Ctrl, Alt) and was primarily developed for the X11 windowing system.</p>
<p>I run a Wayland compositor called <strong>Sway</strong> as my daily driver and it just so happens that Wayland is compatible with the x keyboard extension standard!</p>
<p>Below are some instructions on how to set up Sway with Sticky keys to help eliminate the need for key chords in emacs.  These instructions have been applied to the Sticky Keys section in the emacs wiki : <a href="https://www.emacswiki.org/emacs/StickyModifiers#h5o-8">https://www.emacswiki.org/emacs/StickyModifiers#h5o-8</a></p>
<p>Note that the following instructions can also work for X11 desktop environments as the x keyboard extension has been the de facto standard for many years on X11 and in fact I have successfully set up Sticky Keys in the same manner for the i3 window manager.</p>
<hr />
<p><strong>Setting up Sticky Keys through XKB</strong></p>
<p>Firstly run the bash script below to create two sticky keyboard variant files:</p>
<div class="highlight"><pre tabindex="0"><code class="language-bash" data-lang="bash"><span style="display: flex;"><span><span style="color: #75715e;">#!/bin/bash
</span></span></span><span style="display: flex;"><span><span style="color: #75715e;"></span>DST<span style="color: #f92672;">=</span>$HOME/.config
</span></span><span style="display: flex;"><span>
</span></span><span style="display: flex;"><span><span style="color: #75715e;"># Reset keyboard layout (to your preferred language)</span>
</span></span><span style="display: flex;"><span>setxkbmap gb
</span></span><span style="display: flex;"><span>
</span></span><span style="display: flex;"><span><span style="color: #75715e;"># Apply sticky modifiers to a file</span>
</span></span><span style="display: flex;"><span>xkbcomp $DISPLAY -xkb - | <span style="color: #ae81ff;">\
</span></span></span><span style="display: flex;"><span><span style="color: #ae81ff;"></span>sed <span style="color: #e6db74;">'s|SetMods|LatchMods|g'</span> &gt; <span style="color: #ae81ff;">\
</span></span></span><span style="display: flex;"><span><span style="color: #ae81ff;"></span>$DST/keymap_with_sticky_modifiers.xkb
</span></span><span style="display: flex;"><span>
</span></span><span style="display: flex;"><span><span style="color: #75715e;"># Reset keyboard layout (to your preferred language)</span>
</span></span><span style="display: flex;"><span>setxkbmap gb
</span></span><span style="display: flex;"><span>
</span></span><span style="display: flex;"><span><span style="color: #75715e;"># Apply locked modifiers to a file</span>
</span></span><span style="display: flex;"><span>xkbcomp $DISPLAY -xkb - | <span style="color: #ae81ff;">\
</span></span></span><span style="display: flex;"><span><span style="color: #ae81ff;"></span>sed <span style="color: #e6db74;">'s|SetMods|LatchMods|g'</span> | <span style="color: #ae81ff;">\
</span></span></span><span style="display: flex;"><span><span style="color: #ae81ff;"></span>sed <span style="color: #e6db74;">'s|,clearLocks);|,clearLocks,latchToLock);|g'</span> &gt; <span style="color: #ae81ff;">\
</span></span></span><span style="display: flex;"><span><span style="color: #ae81ff;"></span>$DST/keymap_with_locked_modifiers.xkb
</span></span></code></pre></div><ul>
<li>
<p>keymap_with_sticky_modifiers.xkb - a latched sticky modifier setup in which a modifier is activated by a following key press.</p>
</li>
<li>
<p>keymap_with_locked_modifiers.xkb - a locking sticky modifier setup in which a modifier will be locked on a double tap and then unlocked with a single tap.</p>
</li>
</ul>
<p>At this point you can activate Sticky Keys by loading the new xkb keymap in the Sway config as follows:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">input "type:keyboard" {
    xkb_file $HOME/.config/keymap_with_locked_modifiers.xkb
}
</code></pre><p>Note that for X11 you can use the xkbcomp command as thus:</p>
<div class="highlight"><pre tabindex="0"><code class="language-bash" data-lang="bash"><span style="display: flex;"><span>xkbcomp $HOME/.config/keymap_with_locked_modifiers.xkb $DISPLAY
</span></span></code></pre></div><p>Optionally modify the xkb file directly after generation to use the “Caps Lock” keyboard indicator LED for indicating a sticky modifier is active, like so :</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">indicator "Caps Lock" {
    !allowExplicit;
    whichModState= locked;
    modifiers= Control+Mod1+Shift;
};
</code></pre><p>This turns on the Caps Lock LED whenever a Control, Alt (Mod1) or Shift key is sticky locked giving a visual hint to any locked keys.  Although useful on a laptop if you are using a full sized keyboard each modifier can be linked to its own indicator LED, for example:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">indicator "Caps Lock" {
    !allowExplicit;
    whichModState= locked;
    modifiers= Control;
};
indicator "Num Lock" {
    !allowExplicit;
    whichModState= locked;
    modifiers= Mod1;
};
indicator "Scroll Lock" {
    whichModState= locked;
    modifiers= Shift;
};
</code></pre><p>As part of this keyboard redefinition it might also be useful to remap the Caps Lock key to the Control modifier.  One way to achieve this in Sway is to modify the config file as follows:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">input type:keyboard {
   xkb_file $HOME/.config/keymap_with_locked_modifiers.xkb
   xkb_options ctrl:nocaps
}
</code></pre><p>However, as we are redefining our keyboard layout we can directly modify the xkb configuration file in the following manner:</p>
<p>replace:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">    key &lt;CAPS&gt; {         [       Caps_Lock ] };
</code></pre><p>with</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">    key &lt;CAPS&gt; {         [       Control_L ] };
</code></pre><p>replace:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">    modifier_map Lock { &lt;CAPS&gt; };
</code></pre><p>with</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">    modifier_map Control { &lt;CAPS&gt; };
</code></pre><p>For bonus points, and to ensure that the right Alt modifier functions like a regular Alt thereby distributing the keys more evenly between the left and right hands, perform the following changes:</p>
<p>add:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">    modifier_map Mod1 { &lt;RALT&gt; };
</code></pre><p>set the definition of key &lt;RALT&gt; to:</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">    key &lt;RALT&gt; {         [           Alt_L,          Meta_L ] };
</code></pre><hr />
<p>With this setup, I can now effectively press single keys in succession to trigger functionalities in Emacs that would normally require key chording. Even pressing C-g has become naturally easier; I’m now pressing Ctrl, then not having to stretch my index finger across at the same time as my pinky is now released from the control key.</p>