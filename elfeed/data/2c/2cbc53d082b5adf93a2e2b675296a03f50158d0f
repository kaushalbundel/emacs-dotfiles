<p>When you&rsquo;re driving a car down a road, you might get a bit stuffy and decide
to roll your windows down. The air will flow in, the wind will get louder,
and the sensation of moving will intensify. Your engine will start working a bit
harder&ndash;and louder&ndash;to maintain the same speed.
Every sensation will tell you that you&rsquo;re moving faster, but lowering the window
has increased your car&rsquo;s air resistance, and you&rsquo;re actually going slower.
Or at minimum you&rsquo;re using more fuel to maintain the same speed.</p>
<p>There&rsquo;s nothing that you didn&rsquo;t already know in the first paragraph,
but it remains the most common category of reasoning error that I see stressed executives make.
If you&rsquo;re not sure how to make progress, then emotionally it feels a lot better to
substitute motion for lack of progress, but in practice you&rsquo;re worse off.</p>
<p>Grounding this in a few examples:</p>
<ul>
<li>
<p>Many companies realize that their monolithic codebase is slowing them down.
It&rsquo;s easy to decide to migrate from your monolith to services to &ldquo;solve&rdquo; this problem,
but without a clear service architecture, most attempts take a long time without
improving on the underlying issues. That&rsquo;s because an effective service migration
requires the same skill to operate an effective monolith: good technical design.</p>
<p>However, the microservice migration itself provides a reassuring sensation of progress,
delaying for a year or two the realization that you&rsquo;re in roughly the same place
that you started in.</p>
</li>
<li>
<p>When your engineering organization doesn&rsquo;t seem to be shipping enough software,
an easy solution is to rollout a new development process. For example, you might
say that an ineffective team needs to start following the scrum development technique.</p>
<p>In rare case that the team has never considered any approach to organize their work,
then this might well help. In most cases, this will just paper over whatever problem
is causing the slow down, creating an appearance of progress that&rsquo;ll quickly fade away.</p>
</li>
<li>
<p>It&rsquo;s common for new executives to rollout their preferrenced knowledge base, e.g.
Notion or Confluence or whatnot, operating from the belief that the tool itself is the fundamental
driver of an effective knowledge base.</p>
<p>This will create months of work to move to a new knowledge base, but generally does not
improve the underlying knowledge being managed. Poorly managed knowledge bases are always
related to incentives and culture, not checkbox ready feature lists like &ldquo;effective search.&rdquo;</p>
</li>
</ul>
<p>The pattern here is generally an intuition-driven decision driven by a senior leader, unclear criteria for success,
an orientation towards motion as an effective proxy for progress, and being too busy to
reflect on whether prior actions accomplished their intended goals.
This recipe passes as leadership,
and does share some of the characteristics from <a href="https://lethain.com/developing-leadership-styles/">leading from conviction</a>,
but is always an inferior tactic to another available option.</p>
<p>If you see someone following this tactic, it&rsquo;s a genuine kindness to point it out to them.
If they&rsquo;re not interested in that feedback, you&rsquo;ve learned something important:
they&rsquo;re more focused on the performance act of leadership than in the impact of their work.</p>
<p>To provide one caveat, in cases where you&rsquo;re wholly stuck, then minimizing friction doesn&rsquo;t matter so much.
In that case, Travis Kalanick&rsquo;s classic quote is appropriate,
&ldquo;<a href="https://siliconprairienews.com/2011/05/big-omaha-travis-kalanick-whatever-it-is-that-you-re-afraid-of-go-after-it/">Fear is the disease. Hustle is the antidote</a>.&rdquo;
Frenetic motion is worse than thoughtful pursuit, but some frenzy is preferable to
<a href="https://poets.org/poem/do-not-go-gentle-good-night">going quietly into that good night</a>.</p>