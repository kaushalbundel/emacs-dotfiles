<p>As developers, we can be metric obsessed. We tend to like objective measures of things. 99th percentile request times, CPU percentage, disk utilization. Nothing escapes our attempts to quantify it, not even our productivity: enter story points<sup class="footnote-reference"><a href="#1">1</a></sup>.</p>
<p>We measure our productivity in some way by how much we get done. This is the quantity of work or complexity that a team can get done in a sprint. And once we have a metric, we ruthlessly optimize it.</p>
<p>We want to move fast, so we see how we can improve sprint points. What processes can we optimize? Can we get designs earlier, and plan things out a little better? Can we streamline and remove meetings?</p>
<p>We push story points up and up and up. Eventually they're at a new level, and that becomes the new baseline we have to hit. The urge to get it higher is there, and it's a ratchet that doesn't let the level slip back down.</p>
<p>But where are we going? That's sometimes delegated to product. Product worries about <em>what</em> we build, and engineering worries about <em>how</em> we build it. In the ideal world, anyway. But, here's the rub. <strong>We are all on the same team together</strong>. We are all going the same place. Code doesn't matter if it isn't useful, and ideas and product direction don't matter if they don't get implemented.</p>
<p>We're one team, and we should have the same direction. If we optimize for speed of engineering, we are sacrificing something else.</p>
<p>The problem is with our frame of reference. If we are zoomed in to what we get done each sprint, we are looking just relative to engineering and just relative to where we are. <em>Are we moving? How fast?</em> But we're not asking about where we're going.</p>
<p>If we zoom out and we look in terms of the destination, we get to the measurement that really matters. The ultimate metric that we care about is: how quickly do we get to the final destination of features that work for the users?
To really stretch the metaphor, we usually measure the speed of our car, but we don't think about which direction it's pointed in. If we find a highway without a speed limit, we might get on that even if it can't take us where we need to go!</p>
<p>So why don't we measure progress toward our destination? Well, because <strong>we don't know where that is until we get there</strong>. If we knew ahead of time where we're going, then we <em>could</em> just measure sprint points since we would know what product direction is the most important one. But ultimately, we don't know that.</p>
<p>We know we got to a good destination <em>once we get there</em>. While we're on the way, we don't know what works and what doesn't.</p>
<p>So, what do we do instead?</p>
<p>First, don't throw the baby out with the bathwater. Sprint points are important. (Well, some estimation of productivity is important; relative velocity, as it were). We want to keep that measure, but we have to work to not optimize for it alone. It isn't the end goal, but it's a useful diagnostic signal. If you can't get your car above 20 MPH, you want to go get it checked out, but that doesn't mean you always want to floor it.</p>
<p>And so we can look at other metrics. These are going to be things that center around exploring the landscape so that we can figure out the direction to go in more effectively. Some candidates that come to mind:</p>
<ul>
<li><strong>Time to ship an MVP of a feature</strong>: the shorter you make this, the faster you can get feedback and determine whether or not it's the right direction</li>
<li><strong>Time to get user feedback on a new feature</strong>: again, shorter gets you feedback faster</li>
<li><strong>Time to complete an iteration on a feature</strong>: the more iterations you can fit in, the more times you can get feedback, and the more you can course correct</li>
<li><strong>Amount of user feedback you can get per timeframe</strong>: this will help you know where you're going</li>
</ul>
<p>It doesn't really matter what the specific metric is, as long as you switch from optimizing for productivity alone, and include consideration for the ability to explore and get feedback. I don't think these metrics are north stars that should be optimized for independently, either. All metrics in moderation, as they say.</p>
<p>This isn't something engineering can do alone. This isn't something product can do alone! Making great software is a team sport and is highly, intrinsically, collaborative. Working together to measure the right thing and shift focus to the final destination is one of the keys to making great software and great products.</p>
<p>Let's not forget that where we get to matters a lot more than how we get there<sup class="footnote-reference"><a href="#2">2</a></sup>.</p>
<hr />
<div class="footnote-definition" id="1"><sup class="footnote-definition-label">1</sup>
<p>Or your estimation technique of choice. Personally, I prefer wall clock time, how long something will <em>actually</em> take. This is controversial, and is a subject for <em>another</em> post.</p>
</div>
<div class="footnote-definition" id="2"><sup class="footnote-definition-label">2</sup>
<p>In the sense of process, not in the sense of &quot;ends justify the means.&quot; It's <em>not</em> okay to do unethical things for a just end, but it <em>is</em> okay to change processes to get to a better end outcome.</p>
</div>
