<p>In this ~44 minute video I demonstrate packages that upgrade the
experience with Emacs. They are about the minibuffer: where we
interact with Emacs to call a command by its name or pick a candidate
for some action.</p>

<p>The packages I cover are <code class="language-plaintext highlighter-rouge">vertico</code>, <code class="language-plaintext highlighter-rouge">marginalia</code>, <code class="language-plaintext highlighter-rouge">consult</code>,
<code class="language-plaintext highlighter-rouge">orderless</code>, and <code class="language-plaintext highlighter-rouge">embark</code>. I also mention briefly the <code class="language-plaintext highlighter-rouge">wgrep</code> package
as well as the built-in <code class="language-plaintext highlighter-rouge">savehist-mode</code>, <code class="language-plaintext highlighter-rouge">recentf-mode</code>.</p>

<p>A related video I did about search (search+replace):
<a href="https://protesilaos.com/codelog/2023-06-10-emacs-search-replace-basics/">https://protesilaos.com/codelog/2023-06-10-emacs-search-replace-basics/</a>.</p>

<h2>Sample configuration</h2>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">;; The `vertico' package applies a vertical layout to the minibuffer.</span>
<span class="c1">;; It also pops up the minibuffer eagerly so we can see the available</span>
<span class="c1">;; options without further interactions.  This package is very fast</span>
<span class="c1">;; and "just works", though it also is highly customisable in case we</span>
<span class="c1">;; need to modify its behaviour.</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:cff33514-d3ac-4c16-a889-ea39d7346dc5</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">vertico</span>
  <span class="ss">:ensure</span> <span class="no">t</span>
  <span class="ss">:config</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">vertico-cycle</span> <span class="no">t</span><span class="p">)</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">vertico-resize</span> <span class="no">nil</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">vertico-mode</span> <span class="mi">1</span><span class="p">))</span>

<span class="c1">;; The `marginalia' package provides helpful annotations next to</span>
<span class="c1">;; completion candidates in the minibuffer.  The information on</span>
<span class="c1">;; display depends on the type of content.  If it is about files, it</span>
<span class="c1">;; shows file permissions and the last modified date.  If it is a</span>
<span class="c1">;; buffer, it shows the buffer's size, major mode, and the like.</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:bd3f7a1d-a53d-4d3e-860e-25c5b35d8e7e</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">marginalia</span>
  <span class="ss">:ensure</span> <span class="no">t</span>
  <span class="ss">:config</span>
  <span class="p">(</span><span class="nv">marginalia-mode</span> <span class="mi">1</span><span class="p">))</span>

<span class="c1">;; The `orderless' package lets the minibuffer use an out-of-order</span>
<span class="c1">;; pattern matching algorithm.  It matches space-separated words or</span>
<span class="c1">;; regular expressions in any order.  In its simplest form, something</span>
<span class="c1">;; like "ins pac" matches `package-menu-mark-install' as well as</span>
<span class="c1">;; `package-install'.  This is a powerful tool because we no longer</span>
<span class="c1">;; need to remember exactly how something is named.</span>
<span class="c1">;;</span>
<span class="c1">;; Note that Emacs has lots of "completion styles" (pattern matching</span>
<span class="c1">;; algorithms), but let us keep things simple.</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:7cc77fd0-8f98-4fc0-80be-48a758fcb6e2</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">orderless</span>
  <span class="ss">:ensure</span> <span class="no">t</span>
  <span class="ss">:config</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">completion-styles</span> <span class="o">'</span><span class="p">(</span><span class="nv">orderless</span> <span class="nv">basic</span><span class="p">)))</span>

<span class="c1">;; The `consult' package provides lots of commands that are enhanced</span>
<span class="c1">;; variants of basic, built-in functionality.  One of the headline</span>
<span class="c1">;; features of `consult' is its preview facility, where it shows in</span>
<span class="c1">;; another Emacs window the context of what is currently matched in</span>
<span class="c1">;; the minibuffer.  Here I define key bindings for some commands you</span>
<span class="c1">;; may find useful.  The mnemonic for their prefix is "alternative</span>
<span class="c1">;; search" (as opposed to the basic C-s or C-r keys).</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">consult</span>
  <span class="ss">:ensure</span> <span class="no">t</span>
  <span class="ss">:bind</span> <span class="p">(</span><span class="c1">;; A recursive grep</span>
         <span class="p">(</span><span class="s">"M-s M-g"</span> <span class="o">.</span> <span class="nv">consult-grep</span><span class="p">)</span>
         <span class="c1">;; Search for files names recursively</span>
         <span class="p">(</span><span class="s">"M-s M-f"</span> <span class="o">.</span> <span class="nv">consult-find</span><span class="p">)</span>
         <span class="c1">;; Search through the outline (headings) of the file</span>
         <span class="p">(</span><span class="s">"M-s M-o"</span> <span class="o">.</span> <span class="nv">consult-outline</span><span class="p">)</span>
         <span class="c1">;; Search the current buffer</span>
         <span class="p">(</span><span class="s">"M-s M-l"</span> <span class="o">.</span> <span class="nv">consult-line</span><span class="p">)</span>
         <span class="c1">;; Switch to another buffer, or bookmarked file, or recently</span>
         <span class="c1">;; opened file.</span>
         <span class="p">(</span><span class="s">"M-s M-b"</span> <span class="o">.</span> <span class="nv">consult-buffer</span><span class="p">)))</span>

<span class="c1">;; The `embark' package lets you target the thing or context at point</span>
<span class="c1">;; and select an action to perform on it.  Use the `embark-act'</span>
<span class="c1">;; command while over something to find relevant commands.</span>
<span class="c1">;;</span>
<span class="c1">;; When inside the minibuffer, `embark' can collect/export the</span>
<span class="c1">;; contents to a fully fledged Emacs buffer.  The `embark-collect'</span>
<span class="c1">;; command retains the original behaviour of the minibuffer, meaning</span>
<span class="c1">;; that if you navigate over the candidate at hit RET, it will do what</span>
<span class="c1">;; the minibuffer would have done.  In contrast, the `embark-export'</span>
<span class="c1">;; command reads the metadata to figure out what category this is and</span>
<span class="c1">;; places them in a buffer whose major mode is specialised for that</span>
<span class="c1">;; type of content.  For example, when we are completing against</span>
<span class="c1">;; files, the export will take us to a `dired-mode' buffer; when we</span>
<span class="c1">;; preview the results of a grep, the export will put us in a</span>
<span class="c1">;; `grep-mode' buffer.</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">embark</span>
  <span class="ss">:ensure</span> <span class="no">t</span>
  <span class="ss">:bind</span> <span class="p">((</span><span class="s">"C-."</span> <span class="o">.</span> <span class="nv">embark-act</span><span class="p">)</span>
         <span class="ss">:map</span> <span class="nv">minibuffer-local-map</span>
         <span class="p">(</span><span class="s">"C-c C-c"</span> <span class="o">.</span> <span class="nv">embark-collect</span><span class="p">)</span>
         <span class="p">(</span><span class="s">"C-c C-e"</span> <span class="o">.</span> <span class="nv">embark-export</span><span class="p">)))</span>

<span class="c1">;; The `embark-consult' package is glue code to tie together `embark'</span>
<span class="c1">;; and `consult'.</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">embark-consult</span>
  <span class="ss">:ensure</span> <span class="no">t</span><span class="p">)</span>

<span class="c1">;; The `wgrep' packages lets us edit the results of a grep search</span>
<span class="c1">;; while inside a `grep-mode' buffer.  All we need is to toggle the</span>
<span class="c1">;; editable mode, make the changes, and then type C-c C-c to confirm</span>
<span class="c1">;; or C-c C-k to abort.</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852</span>
<span class="p">(</span><span class="nb">use-package</span> <span class="nv">wgrep</span>
  <span class="ss">:ensure</span> <span class="no">t</span>
  <span class="ss">:bind</span> <span class="p">(</span> <span class="ss">:map</span> <span class="nv">grep-mode-map</span>
          <span class="p">(</span><span class="s">"e"</span> <span class="o">.</span> <span class="nv">wgrep-change-to-wgrep-mode</span><span class="p">)</span>
          <span class="p">(</span><span class="s">"C-x C-q"</span> <span class="o">.</span> <span class="nv">wgrep-change-to-wgrep-mode</span><span class="p">)</span>
          <span class="p">(</span><span class="s">"C-c C-c"</span> <span class="o">.</span> <span class="nv">wgrep-finish-edit</span><span class="p">)))</span>

<span class="c1">;; The built-in `savehist-mode' saves minibuffer histories.  Vertico</span>
<span class="c1">;; can then use that information to put recently selected options at</span>
<span class="c1">;; the top.</span>
<span class="c1">;;</span>
<span class="c1">;; Further reading: https://protesilaos.com/emacs/dotemacs#h:25765797-27a5-431e-8aa4-cc890a6a913a</span>
<span class="p">(</span><span class="nv">savehist-mode</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1">;; The built-in `recentf-mode' keeps track of recently visited files.</span>
<span class="c1">;; You can then access those through the `consult-buffer' interface or</span>
<span class="c1">;; with `recentf-open'/`recentf-open-files'.</span>
<span class="c1">;;</span>
<span class="c1">;; I do not use this facility, because the files I care about are</span>
<span class="c1">;; either in projects or are bookmarked.</span>
<span class="p">(</span><span class="nv">recentf-mode</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2>More links to my Emacs configuration</h2>

<p>My personal Emacs configuration.  It is comprehensive, both in terms of
the [custom] code it contains as well as the documentation on what each
piece of functionality does.</p>

<ul>
  <li>Website: <a href="https://protesilaos.com/emacs/dotemacs">https://protesilaos.com/emacs/dotemacs</a></li>
  <li>Git repositories:
    <ul>
      <li>GitHub: <a href="https://github.com/protesilaos/dotfiles">https://github.com/protesilaos/dotfiles</a></li>
      <li>GitLab: <a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a></li>
    </ul>
  </li>
  <li>Video demo: <a href="https://protesilaos.com/codelog/2023-12-18-emacs-org-advanced-literate-conf/">https://protesilaos.com/codelog/2023-12-18-emacs-org-advanced-literate-conf/</a></li>
  <li>Backronym: Do Observe, Transpose, Examine, or Mirror All
Configurations, Stranger (dotemacs); Dotfiles Operate Transparently
For the Included Linux and Emacs Setups (dotfiles).</li>
</ul>