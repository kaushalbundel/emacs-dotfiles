<p>Last week, I read <a href="https://scholar.google.com/scholar?cluster=11466590537214723805">&quot;Architecture of a Database System&quot;</a> for a <a href="http://redbook.io">Red Book</a> reading group.</p>
<p>This is as massive paper: 119 pages.
What surprised me is how approachable it is.
I have relatively little background building database systems and more experience using them.
Despite this, the paper was readable and I was able to take away quite a bit from it, which I've already put into practice in my <a href="https://github.com/ntietz/anode-kv">redis-compatible KV store</a> that I'm building to learn about database systems.</p>
<p>The paper is structured in a way that makes it easy to skip around and focus on the parts that are most interesting or useful to you at the moment.
It also gives a lot of pointers into other papers or texts to learn more or build a foundation.</p>
<ul>
<li>The first section is under ten pages and gives a map of the rest of the paper as well as of architecture in general, so you can put the different pieces in context.
This is probably the section I would recommend <em>everyone</em> read.</li>
<li>The second and third sections are also really useful as a user of a database system to put in concrete terms why, for example, PostgreSQL does not handle large numbers of open connections very well.
(Hello, <a href="https://www.pgbouncer.org/">PgBouncer</a>!).</li>
<li>The fourth section gives an overview of the relational query processor and helps understand how queries are parsed, optimized, and executed.</li>
<li>The fifth section talks about storage and what considerations go into making it efficient.</li>
<li>The sixth section talks about transactions, concurrency, and recovery. This section breaks down what ACID is (spoiler: it's not well defined, but it's useful anyway), talks about locking, and most importantly goes through transaction isolation levels. It wraps up with durability. This section was probably the most intense for me!</li>
<li>The seventh section talks about the junk drawer that exists in database architectures, just like in all architectures: shared components that get shoved into one category, the section of misfit toys.
I skimmed this one.</li>
</ul>
<p>I think this paper is an excellent introduction to database architecture for users of databases and for anyone who wants to learn more about the internals.
It will give you a good, broad foundation which you can use to drive further exploration and improve your understanding of databases as you use them.</p>
