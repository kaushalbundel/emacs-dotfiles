<p>In this ~27 minute video, I explain how to use the built-in
<code class="language-plaintext highlighter-rouge">abbrev-mode</code> to define ‚Äúabbreviations‚Äù for quick-yet-powerful text
expansion. I cover the most simple scenario and then go into more
technical implementations: (i) to use a function instead of a
predetermined text, and (ii) to expand what counts as an abbreviation
so as to use characters that are not word constituents.</p>

<p>Here is a variant of what I had in my scratch buffer:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">;;; Simple abbreviations</span>

<span class="c1">;; Abbrevs are grouped into "tables". The most specific table</span>
<span class="c1">;; overrides the more general one in case of a conflict.</span>
<span class="p">(</span><span class="nv">define-abbrev</span> <span class="nv">global-abbrev-table</span> <span class="s">"metest"</span> <span class="s">"a global abbrev for demo purposes"</span><span class="p">)</span>
<span class="p">(</span><span class="nv">define-abbrev</span> <span class="nv">text-mode-abbrev-table</span> <span class="s">"metest"</span> <span class="s">"text-mode abbrev expansion here"</span><span class="p">)</span>
<span class="p">(</span><span class="nv">define-abbrev</span> <span class="nv">org-mode-abbrev-table</span> <span class="s">"metest"</span> <span class="s">"org-mode abbrev"</span><span class="p">)</span>

<span class="c1">;; `abbrev-mode' is buffer-local</span>
<span class="p">(</span><span class="nv">abbrev-mode</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">; so this is WRONG</span>

<span class="c1">;; The following is the correct way to enable the buffer-local minor</span>
<span class="c1">;; mode where you want it. Remember the inheritence of major modes.</span>
<span class="c1">;;</span>
<span class="c1">;; Parent modes: `prog-mode' (programming), `text-mode' (prose).</span>
<span class="p">(</span><span class="nv">add-hook</span> <span class="ss">'text-mode-hook</span> <span class="ss">'abbrev-mode</span><span class="p">)</span>

<span class="c1">;;; Abbreviations that expand into some text by calling a function.</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">my-current-time</span> <span class="p">()</span>
  <span class="p">(</span><span class="nv">insert</span> <span class="p">(</span><span class="nv">format-time-string</span> <span class="s">"%T"</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">define-abbrev</span> <span class="nv">global-abbrev-table</span> <span class="s">"metime"</span> <span class="s">""</span> <span class="ss">'my-current-time</span><span class="p">)</span>

<span class="c1">;; This code is fine, but it does not work for abbrevs because the</span>
<span class="c1">;; function is called with no arguments.</span>
<span class="c1">;;</span>
<span class="c1">;; (defun my-greet-person (name)</span>
<span class="c1">;;   (interactive (list (read-string "Greet person: ")))</span>
<span class="c1">;;   (insert (format "Hello %s" name)))</span>

<span class="c1">;; So we use something like this instead of the above...</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">my-greet-person</span> <span class="p">()</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">insert</span> <span class="p">(</span><span class="nb">format</span> <span class="s">"Hello %s"</span> <span class="p">(</span><span class="nv">read-string</span> <span class="s">"Greet person: "</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define-abbrev</span> <span class="nv">global-abbrev-table</span> <span class="s">"mehi"</span> <span class="s">""</span> <span class="ss">'my-greet-person</span><span class="p">)</span>

<span class="c1">;;; Abbreviations with a modified match for word boundaries</span>

<span class="p">(</span><span class="nv">define-abbrev</span> <span class="nv">global-abbrev-table</span> <span class="s">":uni"</span> <span class="s">"ü¶Ñ"</span><span class="p">)</span>

<span class="c1">;; We need to modify the properties of the abbreviation table to</span>
<span class="c1">;; accept characters that are not word consituents.</span>
<span class="c1">;;</span>
<span class="c1">;; We learn about `abbrev-table-put' and relevant properties from the</span>
<span class="c1">;; Elisp manual. Evaluate: (info "(elisp) Abbrev Table Properties")</span>
<span class="p">(</span><span class="nv">abbrev-table-put</span> <span class="nv">global-abbrev-table</span> <span class="ss">:regexp</span> <span class="s">"\\(?:^\\|[\t\s]+\\)\\(?1:[:_].*\\|.*\\)"</span><span class="p">)</span>
</code></pre></div></div>