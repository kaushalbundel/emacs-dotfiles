
<p>
Sorry for the long break. Once December started, I spent the first few
weeks spending my coding time on <a href="https://adventofcode.com/">Advent of Code</a>, then just got
sidetracked but now it&#39;s time to get going again.</p>
<p>
This is the last elisp topic I specifically wanted to cover so this
and the next video mmight be the end of this series, we&#39;ll see.</p>
<p>
What are we doing today? Using a web API. Basically, if we want to use
some external data source or facility a typical way to make that
happen is through a web API. We could write our own, but for today
we&#39;re going to use a free to use online thesaurus service. The idea is
that we can send it a word and we&#39;ll get back synonyms. The end result
will be, as we&#39;re writing, we hit the magic key, get a list of
alternative words and then select one, or not.</p>
<p>
The API we&#39;ll be using is at <a href="https://dictionaryapi.com/.">https://dictionaryapi.com/.</a> It&#39;s part of
Merriam-Webster&#39;s set of free to use tools. To use it, we have to go
to <a href="https://dictionaryapi.com/register/index">this</a> page and register to get an API key, then to use it to get
synonyms for a word, you go to a url formatted like this:</p>
https://dictionaryapi.com/api/v3/references/thesaurus/json/<b>word</b>?key=<b>MYKEY</b>
<p>
where <strong>word</strong> is the word you want to lookup and <strong>MYKEY</strong> is the key you
got when registering.</p>
<p>
The result will be a string of data representing the <a href="https://json.org">JSON</a> formatted
response.</p>
<p>
How do we do this?</p>
<p>
First, to get the data, we can use elisp&#39;s
<code>url-retreive-synchronously</code>. This takes a string with our url and
returns a buffer with the results. In the video, we first show that we
can use the <code>switch-to-buffer</code> function to go to the buffer with the
results:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span> (defvar key <span style="color:#e6db74">&#34;mykey&#34;</span>)
</span></span><span style="display:flex;"><span> (defvar base-url <span style="color:#e6db74">&#34;https://dictionaryapi.com/api/v3/references/thesaurus/json/&#34;</span>)
</span></span><span style="display:flex;"><span> (switch-to-buffer (url-retrieve-synchronously (<span style="color:#a6e22e">concat</span> base-url <span style="color:#e6db74">&#34;polite&#34;</span> <span style="color:#e6db74">&#34;?key=&#34;</span> key)))</span></span></code></pre></div>
</div>
<p>
and then show how we can use <code>with-current-buffer</code> to take the buffer
with our data and manipulate it before using the <code>buffer-string</code>
function to return what we want.</p>
<p>
Finally, we convert the json string into an elisp data structure, an
array of arrays and hash tables using <code>json-parse-string</code>.</p>
<p>
Here&#39;s the complete code:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> (defvar key <span style="color:#e6db74">&#34;mykey&#34;</span>)
</span></span><span style="display:flex;"><span> (defvar base-url <span style="color:#e6db74">&#34;https://dictionaryapi.com/api/v3/references/thesaurus/json/&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">;; Example using switch-to-buffer</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">;; (switch-to-buffer</span>
</span></span><span style="display:flex;"><span> <span style="color:#75715e">;; (url-retrieve-synchronously (concat base-url &#34;umpire&#34; &#34;?key=&#34; key)))</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> (defun get-synonyms (word)
</span></span><span style="display:flex;"><span> (let* ((url (<span style="color:#a6e22e">concat</span> base-url word <span style="color:#e6db74">&#34;?key=&#34;</span> key))
</span></span><span style="display:flex;"><span> (resp (with-current-buffer (url-retrieve-synchronously url)
</span></span><span style="display:flex;"><span> (<span style="color:#a6e22e">goto-char</span> (<span style="color:#a6e22e">point-min</span>))
</span></span><span style="display:flex;"><span> (<span style="color:#a6e22e">re-search-forward</span> <span style="color:#e6db74">&#34;^$&#34;</span>)
</span></span><span style="display:flex;"><span> (<span style="color:#a6e22e">delete-region</span> (<span style="color:#a6e22e">point</span>) (<span style="color:#a6e22e">point-min</span>))
</span></span><span style="display:flex;"><span> (<span style="color:#a6e22e">buffer-string</span>)))
</span></span><span style="display:flex;"><span> (json-resp (json-parse-string resp))
</span></span><span style="display:flex;"><span> )
</span></span><span style="display:flex;"><span> json-resp))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> (get-synonyms <span style="color:#e6db74">&#34;umpire&#34;</span>)</span></span></code></pre></div>
</div>
<p>
The video covers all the details. In the next installment, we&#39;ll see
how we can take this json response, pull out the synonyms and easily
replace the current word with one.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Code:
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
The code for the series is still up here:</p>
<ul>
<li><a href="https://gitlab.com/zamansky/learning-elisp-code">https://gitlab.com/zamansky/learning-elisp-code</a></li>
</ul>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
The videos:
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<iframe width="560" height="315" src="https://www.youtube.com/embed/tGZNhJmZ_2M?si=QHZ176EWF8OdodLg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>
Video link: <a href="https://www.youtube.com/watch?v=tGZNhJmZ_2M">https://www.youtube.com/watch?v=tGZNhJmZ_2M</a></p>
</div>
</div>