<p>Happy Pi Day, fellow nerds!
This is a holiday I've celebrated every year since at least 2010, and I'm not stopping anytime soon.</p>
<p>The celebrations have evolved.
It used to be just &quot;bake a pie&quot; and &quot;haha pi, pie&quot;.</p>
<p>Over time, I twisted it a bit (pizza is a pie of sorts! a cake with a pi symbol on it!).
This year is the next evolution.
I've made a cake with an experiment on it for estimating the value of pi.</p>
<p>This is a really cool technique called <a href="https://en.wikipedia.org/wiki/Buffon%27s_needle_problem">Buffon's needle problem</a> and I first heard about it from my grandfather at a restaurant.
I think I was in middle school.
Anyway, he was telling me about this way that you could estimate pi by tossing a needle on the floor and counting the number of times where it ended up crossing the line between floor boards.</p>
<p>I didn't really <em>get</em> it then, but it stuck in my mind that it was really neat that you could do this thing to estimate the value of pi!
I understood it had something to do with the needle being able to form a circle (rotated around its center) and some such.</p>
<p>Fast forward to 2023, and I'm sitting idly thinking about Pi Day plans, and I realize.
I can make a cake.
I can draw lines on it.
I have sprinkles.
We can do Grandpa Bill's pi needle estimate, but on a <em>cake</em>!</p>
<p>First, I have to figure out what is that even that he had told me about.
It was easy enough to find the Wikipedia page for <a href="https://en.wikipedia.org/wiki/Buffon%27s_needle_problem">Buffon's needle problem</a>.
The original formulation wasn't around estimating the value of pi, but it sure can be used that way.</p>
<p>Basically, you have this formula: <code>p = (2/pi) * (l/t)</code>, where:</p>
<ul>
<li><code>p</code> is the probability that the needle will cross the line between two floor boards</li>
<li><code>l</code> is the length of the needle</li>
<li><code>t</code> is the width of the floor boards</li>
</ul>
<p>We can reformulate this as <code>pi = (2/p) * (l/t)</code>, and then can derive an estimate of pi from an estimate of the probability that the needle crosses a floor board.
Or the probability that a sprinkle crosses a line on a cake.
You see where this is going.</p>
<p>We're going to &quot;bake&quot; a cake on an HTML canvas, and do a <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo simulation</a> of the value of pi.</p>
<p>The first thing we need to do is setup our canvas.
We make the element, and set some styles so that it's square and as big as can be, but not <em>too</em> big, we're not monsters.</p>
<pre data-lang="html" class="language-html "><code class="language-html" data-lang="html">&lt;canvas id=&quot;needles&quot; style=&quot;aspect-ratio: 1&#x2F;1; display: inline-block; width: 100%; max-width: 400px;&quot;&gt;&lt;&#x2F;canvas&gt;
</code></pre>
<p>Then we do a little bit of JS to make the canvas scale to the size of the element.
We add the lines on the cake, and we add sprinkles on it.</p>
<p>The code is all available <a href="https://git.sr.ht/~ntietz/ntietz.com/tree/main/item/static/js/blog/buffon-needles.js">in the repo</a>, so I won't go into detail on all of it here.
But there's this one really cool bit I ran across while coding it up.</p>
<p>How do you put the sprinkle facing a random direction?
My first thought was to generate a random angle and then compute the sprinkle vector from there.
That either relies on picking an angle in radians (thus relying on pi) or using sine or cosine, which also feels like it's against the spirit of estimating pi.
So what to do?</p>
<p>Enter: the unit circle!</p>
<p>I found <a href="https://www.kuniga.me/blog/2022/08/01/random-points-in-circumference.html">a cool blog post</a> which mentioned an algorithm from von Neumann himself.
The key insight is that if you have a uniformly distributed random number in a range, you can map that onto the unit circle (and keep regenerating if you are outside the unit circle).
Then you can scale it to land on the circle, instead of inside it, and you now have a random point on the circumference of the unit circle!</p>
<p>Let's see that in code.</p>
<pre data-lang="javascript" class="language-javascript "><code class="language-javascript" data-lang="javascript">&#x2F;&#x2F; Generate a vector at a random angle between -90 and 90 degrees
function randomAngleUnitVector() {
  &#x2F;&#x2F; If we&#x27;re not inside the unit circle, we&#x27;ll keep retrying
  &#x2F;&#x2F; until we succeed. This should pass pretty quickly.
  while (true) {

    &#x2F;&#x2F; Math.random() gives us a uniform distribution in [0,1].
    let x = Math.random();
    let y = 2 * Math.random() - 1;

    let r = Math.sqrt(x*x + y*y);

    if (r &lt;= 1) {
      &#x2F;&#x2F; We got it, so we&#x27;ll scale the vector out to the circle
      return [x &#x2F; r, y &#x2F; r];
    }
  }
}
</code></pre>
<p>I sprinkled (pun intended) some comments in.
The core idea here is so cool and clever.
Glad it's in my tool bag now.</p>
<p>So now we have everything we need.
The cake's been in the oven and, oh look, <strong>it's done</strong>.
Let's pull it out and see what we got!</p>
<p>I left some sliders down below for you to play around with.
You can drag them around to play with different parameters, like the size and quantity of sprinkles, and see how that affects the estimate of pi.</p>
<p>Just remember that since this is a simulation, you'll get very different values each time.
So if you want to see if parameters improved it, you may want to click &quot;bake&quot; a few times to see a clearer picture of the change.</p>
<p><canvas id="needles" style="aspect-ratio: 1/1; width: 100%; max-width: 400px;"></canvas></p>
<p>This cake estimates pi as <span id="pi-approx"></span>. <br/>
The running estimate for these params is <span id="pi-approx-running"></span>. <br/>
You've baked <span id="cake-count"></span> of this kind.</p>
<p><label for="sprinkle-slider">Number of sprinkles: <span id="sprinkle-label"></span></label> <br/>
<input type="range" value="2" min="1" max="5" step="1" onChange="updateSprinkles()" id="sprinkle-slider" /></p>
<p><label for="sprinkle-size-slider">Sprinkle-to-stripe ratio: <span id="sprinkle-size-label"></span></label> <br/>
<input type="range" value="0.2" min="0.1" max="1.0" step="0.05" onChange="updateSprinkleSize()" id="sprinkle-size-slider" /></p>
<p><label for="stripes-slider">Number of stripes: <span id="stripes-label"></span></label> <br/>
<input type="range" value="10" min="2" max="30" step="1" onChange="updateStripes()" id="stripes-slider" /></p>
<input type="button" onclick="drawCake()" value="Bake!" />
<br/>
<p>Oh yeah, and I did this in real-life, too.
Here's the pi-approximation cake in all its glory.</p>
<p><img src="/images/pi-cake.jpeg" alt="Cake with lines and sprinkles on it to illustrate a method of approximating pi." /></p>
<div>
  <script src="/js/blog/buffon-needles.js"></script>
</div>
