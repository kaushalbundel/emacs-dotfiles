
<p>
Today we&#39;re finishing off our emoji project. This video covers two
quick things.</p>
<p>
The first is how we can make the mode use either of our replacement
methods - one that actually replaces the text with the emoji and the
other that uses text properties to overlay the emoji without changing
the text.</p>
<p>
This is done with a variable that we can set telling us which function
to call. We used one named <code>emoji-replace-by-insert</code>. If it&#39;s <code>t</code> (true)
we use the replace method, if it&#39;s <code>nil</code> we use the overlay one.</p>
<p>
We could just use an if statement in our define minor mode but I
decided to use this as an opportunity to show how we can assign a
function to a variable which might be new to some readers/viewers.</p>
<p>
Let&#39;s say we want to create a variable named <code>my_function_variable</code>
and have it stand in for, let&#39;s say the built in <code>1+</code> function that
increments a value. We could do a simple assignment:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span> (setq my_function_variable <span style="color:#a6e22e">#&#39;1+</span>)</span></span></code></pre></div>
</div>
<p>
Unfortunately, in Elisp we can&#39;t just call our new variable as a
function straight out but rather must call it using funcall, like
this:</p>
<div class="src src-emacs-lisp">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="display:flex;"><span> (<span style="color:#a6e22e">funcall</span> my_variable_function <span style="color:#ae81ff">5</span>) <span style="color:#75715e">;; this returns 6, just like (1+ 5) would</span></span></span></code></pre></div>
</div>
<p>
In other languages we could just call the function directly. In the
case of defining our mode, we can just throw in the variable once we
assign it. Here&#39;s the code:</p>
<div class="src src-eamcs-lisp">
<pre tabindex="0"><code class="language-eamcs-lisp" data-lang="eamcs-lisp">(define-minor-mode emoji-replace-mode
&#34;fill in the docstring later&#34;
:lighter &#34; ER&#34;
(let ((func (if emoji-replace-by-insert
#&#39;emoji-replace-insert
#&#39;emoji-replace-overlay)))
(if emoji-replace-mode
(add-hook &#39;after-change-functions func nil t)
(remove-hook &#39;after-change-functions func))))</code></pre>
</div>
<p>
We use the <code>let</code> form to assign our variable <code>func</code> to the appropriate
function and then just pass along <code>func</code> when we use <code>add-hook</code> and
<code>remove-hook</code>.</p>
<p>
That&#39;s it.</p>
<p>
The other thing we cover involves cleaning up our variables. In
earlier videos we used <code>setq</code> but also showed <code>defvar</code> with the
practical difference being that <code>defvar</code> had a docstring.</p>
<p>
In this video, we look at <code>defcustom</code> which looks like <code>defvar</code> but
also lets you change the variable value using emacs&#39;
<code>customize-variable</code> command and interface. Further, if we do change
the variable this way and save it through the interface, it will save
the change in your <code>init.el</code> file for future use. It&#39;s a nice touch
when making a complete &#34;package.&#34;</p>
<p>
That&#39;s it for this project. I might do one more on setting things up
for installation using straight or something similar. If not, it&#39;ll be
on to the next project which I think will be a thesaurus moed.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Code:
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>
The code for the series is still up here:</p>
<ul>
<li><a href="https://gitlab.com/zamansky/learning-elisp-code">https://gitlab.com/zamansky/learning-elisp-code</a></li>
</ul>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
The videos:
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<iframe width="560" height="315" src="https://www.youtube.com/embed/Y9TPHo33Y1Y?si=fG4a5XbFnx6yS11J" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>
Video link: <a href="https://www.youtube.com/watch?v=Y9TPHo33Y1Y">https://www.youtube.com/watch?v=Y9TPHo33Y1Y</a></p>
</div>
</div>