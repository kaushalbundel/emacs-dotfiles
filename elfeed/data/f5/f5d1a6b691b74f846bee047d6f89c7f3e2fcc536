<p>There are lots of quality-of-life improvements to <code class="language-plaintext highlighter-rouge">denote</code> ahead of
version <code class="language-plaintext highlighter-rouge">2.1.0</code> (I might release it this month).  Among them is a new
user option to control the letter casing of individual file name
components.</p>

<p>Before I elaborate, a brief description of Denote is in order.  At its
core, Denote is a file-naming scheme implemented as an Emacs package
that (i) creates new “note” files and links between them, and (ii)
renames existing files.  Denote works with any file type—it is NOT
an Org extension.  Use it to manage your knowledge base and long-term
file storage.  When Denote operates on file names, it enforces its
file-naming scheme.  The idea is to embed valuable (i.e. searchable)
information in file names, including the time stamp, file title,
keywords, and a catch-all string of characters (the “signature”).
File names can then be searched easily using standard tools, even if
Emacs is not available.  The details of the file-naming scheme and
everything else are documented at length in the manual.</p>

<p>Back to the new feature: the <code class="language-plaintext highlighter-rouge">denote-file-name-letter-casing</code> user
option.  The status quo ex ante was to downcase the entire file name,
whereas now we can have, say, keywords be recorded verbatim while the
rest are downcased.  A potentially useful application of this is to
apply camelCase, CAPITALS, aLtCaPs (see my <code class="language-plaintext highlighter-rouge">altcaps</code> package), etc.,
to keywords and/or the signature.</p>

<h2>The effect of the new option</h2>

<p>Using the default value of <code class="language-plaintext highlighter-rouge">denote-file-name-letter-casing</code>, we get
the following file name for these inputs (e.g. by calling <code class="language-plaintext highlighter-rouge">M-x
denote</code>, <code class="language-plaintext highlighter-rouge">M-x denote-signature</code>, and the like).  I am using an
all-inclusive case here, though note that all file name components
apart from timestamps are optional.</p>

<table>
  <thead>
    <tr>
      <th>File name component</th>
      <th>User input</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>title</td>
      <td>“How do you turn this on?”</td>
    </tr>
    <tr>
      <td>keywords</td>
      <td>“camelCase” “GNUEmacs”</td>
    </tr>
    <tr>
      <td>signature</td>
      <td>“SIG”</td>
    </tr>
  </tbody>
</table>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">denote-file-name-letter-casing</span>  <span class="c1">; the defaults</span>
      <span class="o">'</span><span class="p">((</span><span class="nv">title</span> <span class="o">.</span> <span class="nv">downcase</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">signature</span> <span class="o">.</span> <span class="nv">downcase</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">keywords</span> <span class="o">.</span> <span class="nv">downcase</span><span class="p">)</span>
        <span class="p">(</span><span class="no">t</span> <span class="o">.</span> <span class="nv">downcase</span><span class="p">)))</span>

<span class="c1">;; =&gt; 20231011T150058==sig--how-do-you-turn-this-on__camelcase_gnuemacs.org</span>
</code></pre></div></div>

<p>And then with this:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">denote-file-name-letter-casing</span>
      <span class="o">'</span><span class="p">((</span><span class="nv">title</span> <span class="o">.</span> <span class="nv">downcase</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">signature</span> <span class="o">.</span> <span class="nv">verbatim</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">keywords</span> <span class="o">.</span> <span class="nv">verbatim</span><span class="p">)</span>
        <span class="p">(</span><span class="no">t</span> <span class="o">.</span> <span class="nv">downcase</span><span class="p">)))</span>

<span class="c1">;; =&gt; 20231011T150420==SIG--how-do-you-turn-this-on__camelCase_GNUEmacs.org</span>
</code></pre></div></div>

<h2>Documentation of <code class="language-plaintext highlighter-rouge">denote-file-name-letter-casing</code></h2>

<p>Specify the method Denote uses to affect the letter casing of file names.</p>

<p>The value is an alist where each element is a cons cell of the
form (COMPONENT . METHOD).</p>

<ul>
  <li>
    <p>The COMPONENT is an unquoted symbol among <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">signature</code>,
<code class="language-plaintext highlighter-rouge">keywords</code>, which refer to the corresponding component of the
file name.  The special t COMPONENT is a fallback value in case
the others are not specified.</p>
  </li>
  <li>
    <p>The METHOD is the letter casing scheme, which is an unquoted
symbol of either <code class="language-plaintext highlighter-rouge">downcase</code> or <code class="language-plaintext highlighter-rouge">verbatim</code>.  A nil value has the
same meaning as <code class="language-plaintext highlighter-rouge">downcase</code>.  Other non-nil METHOD types are
reserved for possible future use.</p>

    <p>The <code class="language-plaintext highlighter-rouge">downcase</code> METHOD converts user input for the given
COMPONENT into lower case.  The benefit of this approach (which
is the default behaviour) is that file names remain consistent
over the long-term.  The user never needs to account for
varying letter casing while working with them.</p>

    <p>The <code class="language-plaintext highlighter-rouge">verbatim</code> METHOD means that Denote will not affect the
letter casing of user input when generating the given file name
COMPONENT.  As such, conventions like CamelCase or camelCase
are respected.  The user thus assumes responsibility to keep
file names in a good state over the long term.</p>
  </li>
</ul>

<h2>In development</h2>

<p>Given the above, I think the <code class="language-plaintext highlighter-rouge">denote-allow-multi-word-keywords</code> user
option may no longer be useful.  If you cannot avoid multiple words,
it is better to use camel casing as this keeps hyphens limited to the
title component of the file name.</p>

<p>At any rate, this is part of the current development target.  I may
still make changes, subject to user feedback.</p>

<h2>Denote sources</h2>

<ul>
  <li>Package name (GNU ELPA): <code class="language-plaintext highlighter-rouge">denote</code></li>
  <li>Official manual: <a href="https://protesilaos.com/emacs/denote">https://protesilaos.com/emacs/denote</a></li>
  <li>Change log: <a href="https://protesilaos.com/emacs/denote-changelog">https://protesilaos.com/emacs/denote-changelog</a></li>
  <li>Git repo on SourceHut: <a href="https://git.sr.ht/~protesilaos/denote">https://git.sr.ht/~protesilaos/denote</a>
    <ul>
      <li>Mirrors:
        <ul>
          <li>GitHub: <a href="https://github.com/protesilaos/denote">https://github.com/protesilaos/denote</a></li>
          <li>GitLab: <a href="https://gitlab.com/protesilaos/denote">https://gitlab.com/protesilaos/denote</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Mailing list: <a href="https://lists.sr.ht/~protesilaos/denote">https://lists.sr.ht/~protesilaos/denote</a></li>
  <li>Video demo: <a href="https://protesilaos.com/codelog/2022-06-18-denote-demo/">https://protesilaos.com/codelog/2022-06-18-denote-demo/</a></li>
  <li>Backronyms: Denote Everything Neatly; Omit The Excesses.  Don’t Ever
Note Only The Epiphenomenal.</li>
</ul>