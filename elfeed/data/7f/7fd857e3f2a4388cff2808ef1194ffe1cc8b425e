<div class="content" id="content">
<h1 class="title">Smart Media Selector For The Audio Desktop</h1>
<div class="outline-2" id="outline-container-org15514aa">
<h2 id="org15514aa"><span class="section-number-2">1.</span> Overview</h2>
<div class="outline-text-2" id="text-1">
<p>
I have over 60MB of audio content on my laptop spread across 755
subdirecories in over 9100 files. I also have many Internet stream
shortcuts that I listen to on a regular basis.
</p>

<p>
This blog article outlines the media selector implementation in
Emacspeak  and shows how a small amount of Lisp code built atop
Emacs' built-in affordances of completion  provides a light-weight yet
efficient interface. Notice that the implementation does not involve
fancy things like SQL databases,  MP3 tags that one needs to update
etc.; the solution relies on the speed of today's laptops, especially
given the speed of disk access.
</p>
</div>
</div>

<div class="outline-2" id="outline-container-org9a3ab1b">
<h2 id="org9a3ab1b"><span class="section-number-2">2.</span> User Experience</h2>
<div class="outline-text-2" id="text-2">
<p>
As I type this up, the set of requirements as expressed in English
is far more verbose (and likely more complicated) than its
expression in Lisp!
</p>
</div>

<div class="outline-3" id="outline-container-org1acff4f">
<h3 id="org1acff4f"><span class="section-number-3">2.1.</span> Pre-requisites for content selection and playback</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>Launch either MPV (via package <code>empv.el</code>) or <code>mplayer</code> via
Emacspeak's <code>emacspeak-mplayer</code> with a few keystrokes.</li>
<li>Media selection uses <code>ido</code> with <code>fuzzy</code> matching.</li>
<li>Choices are filtered incrementally for efficient eyes-free
interaction; see the relevant blog article on
<a href="https://emacspeak.blogspot.com/2018/06/%20effective-suggest-and-complete-in-eyes.html">Search, Input, Filter, Target</a> for additional background.</li>
<li>Content can be filtered using  the directory structure,
where directories conceptually equate to music albums,  audio
books or othre logical content groups.Once selected, a directory
and its contents are played as a conceptual <i>play-list</i>.</li>
<li>Searching and filtering can also occur across the list of all
9,100+ media files spread across 700+ directories.</li>
<li>Starting point of the SIFT process should be influenced by one's current context, e.g., default-directory.</li>
<li>Each step of this process should have reasonable fallbacks.</li>
</ol>
</div>
</div>
</div>

<div class="outline-2" id="outline-container-orgb044db1">
<h2 id="orgb044db1"><span class="section-number-2">3.</span> Mapping Design To Implementation</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>Directory where we start AKA <i>context</i> is selected by function  <a href="https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-m-player.el#L357">emacspeak-media-guess-directory</a>.
<ol class="org-ol">
<li>If default directory matches emacspeak-media-directory-regexp,use it.</li>
<li>If default directory contains media files, then use it.</li>
<li>If default directory contains directory emacspeak-media — then use it.</li>
<li>Otherwise use emacspeak-media-shortcuts as the fallback.</li>
</ol></li>
<li>Once we have selected the context, function
<a href="https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-m-player.el#L426">emacspeak-media-read-resource</a>uses <code>ido</code> style interaction with
fuzzy-matching to pick the file to play.</li>
<li>That function uses Emacs' built-in <code>directory-files-recursively</code>
to build the <code>collection</code> to hand-off to <code>completing-read</code>; It
uses an Emacspeak provided function <a href="https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-speak.el#L92">ems–subdirs-recursively</a> to
build up the list of 755+ sub-directories that live under
<span class="underline">$XDG<sub>MUSIC</sub><sub>DIR</sub></span>.</li>
</ol>
</div>
</div>


<div class="outline-2" id="outline-container-org471fc48">
<h2 id="org471fc48"><span class="section-number-2">4.</span> Resulting Experience</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>I can pick the media to play with a few keystrokes.</li>
<li>I use Emacs' <code>repeat-mode</code> to advantage whereby I can quickly
change volume etc  once content is playing before going back to work.</li>
<li>There's <b>no</b> media-player UI to get in my way while working, but I
can stop playing media with a single keystroke.</li>
<li>Most importantly, I dont have to tag media, maintain databases or
do other busy work to be able to launch the media  that I want!</li>
</ol>
</div>
</div>

<div class="outline-2" id="outline-container-org091f582">
<h2 id="org091f582"><span class="section-number-2">5.</span> The Lisp Code</h2>
<div class="outline-text-2" id="text-5">
<p>
The hyperlinks to the Emacspeak code-base are the source of
truth. I'll  include a snapshot of the  functions mentioned
above for completeness.
</p>
</div>


<div class="outline-3" id="outline-container-org0433a76">
<h3 id="org0433a76"><span class="section-number-3">5.1.</span> Guess Context</h3>
<div class="outline-text-3" id="text-5-1">
<div class="org-src-container">
<pre class="src src-emacs-lisp">  (<span style="color: #70a0ff; font-weight: bold;">defun</span> <span style="color: #7fce5f;">emacspeak-media-guess-directory</span> ()
  <span style="color: #99bfcf; font-style: italic;">"Guess media directory.</span>
<span style="color: #99bfcf; font-style: italic;">1. If default directory matches emacspeak-media-directory-regexp,use it.</span>
<span style="color: #99bfcf; font-style: italic;">2.  If default directory contains media files, then use it.</span>
<span style="color: #99bfcf; font-style: italic;">3. If default directory contains directory emacspeak-media --- then use it.</span>
<span style="color: #99bfcf; font-style: italic;">4. Otherwise use emacspeak-media-shortcuts as the fallback."</span>
  (<span style="color: #70a0ff; font-weight: bold;">cl-declare</span> (special emacspeak-media-directory-regexp
                       emacspeak-media emacspeak-m-player-hotkey-p))
  (<span style="color: #70a0ff; font-weight: bold;">let</span> ((case-fold-search t))
    (<span style="color: #70a0ff; font-weight: bold;">cond</span>
     ((<span style="color: #70a0ff; font-weight: bold;">or</span> (eq major-mode 'dired-mode) (eq major-mode 'locate-mode)) nil)
     (emacspeak-m-player-hotkey-p   emacspeak-media-shortcuts)
     ((<span style="color: #70a0ff; font-weight: bold;">or</span>                               <span style="color: #eaa4a4; font-style: italic;">;  </span><span style="color: #eaa4a4; font-style: italic;">dir  contains media:</span>
       (string-match emacspeak-media-directory-regexp default-directory)
       (directory-files default-directory   nil emacspeak-media-extensions))
      default-directory)
     ((file-in-directory-p emacspeak-media default-directory) emacspeak-media)
     (t   emacspeak-media-shortcuts))))
</pre>
</div>
</div>
</div>


<div class="outline-3" id="outline-container-org932506f">
<h3 id="org932506f"><span class="section-number-3">5.2.</span> Read Resource</h3>
<div class="outline-text-3" id="text-5-2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #70a0ff; font-weight: bold;">defun</span> <span style="color: #7fce5f;">emacspeak-media-read-resource</span> (<span style="color: #41bf4f;">&amp;optional</span> prefix)
  <span style="color: #99bfcf; font-style: italic;">"Read resource from minibuffer.</span>
<span style="color: #99bfcf; font-style: italic;">If a dynamic playlist exists, just use it."</span>
  (<span style="color: #70a0ff; font-weight: bold;">cl-declare</span> (special emacspeak-media-dynamic-playlist
                       emacspeak-m-player-hotkey-p))
  (<span style="color: #70a0ff; font-weight: bold;">cond</span>
   (emacspeak-media-dynamic-playlist nil) <span style="color: #eaa4a4; font-style: italic;">; </span><span style="color: #eaa4a4; font-style: italic;">do nothing if dynamic playlist</span>
   (emacspeak-m-player-hotkey-p (emacspeak-media-local-resource prefix))
   (t                               <span style="color: #eaa4a4; font-style: italic;">; </span><span style="color: #eaa4a4; font-style: italic;">not hotkey, not dynamic playlist</span>
    (<span style="color: #70a0ff; font-weight: bold;">let*</span> ((completion-ignore-case t)
           (read-file-name-completion-ignore-case t)
           (filename
            (<span style="color: #70a0ff; font-weight: bold;">when</span> (memq major-mode '(dired-mode locate-mode))
              (dired-get-filename 'local 'no-error)))
           (dir (emacspeak-media-guess-directory))
           (collection
            (<span style="color: #70a0ff; font-weight: bold;">or</span>
             filename                   <span style="color: #eaa4a4; font-style: italic;">; </span><span style="color: #eaa4a4; font-style: italic;">short-circuit expensive call</span>
             (<span style="color: #70a0ff; font-weight: bold;">if</span> prefix
                 (ems--subdirs-recursively  dir) <span style="color: #eaa4a4; font-style: italic;">;</span><span style="color: #eaa4a4; font-style: italic;">list dirs</span>
               (directory-files-recursively dir emacspeak-media-extensions)))))
      (<span style="color: #70a0ff; font-weight: bold;">or</span> filename (completing-read <span style="color: #65d5a8;">"Media: "</span>  collection))))))
</pre>
</div>
</div>
</div>



<div class="outline-3" id="outline-container-org4cb0687">
<h3 id="org4cb0687"><span class="section-number-3">5.3.</span> Helper: Recursive List Of Sub-directories</h3>
<div class="outline-text-3" id="text-5-3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">  <span style="color: #eaa4a4; font-style: italic;">;;; </span><span style="color: #eaa4a4; font-style: italic;">Helpers: subdirs</span>


(<span style="color: #70a0ff; font-weight: bold;">defconst</span> <span style="color: #2fd0db;">ems--subdirs-filter</span>
  (<span style="color: #70a0ff; font-weight: bold;">eval-when-compile</span>
    (concat (regexp-opt '(<span style="color: #65d5a8;">"/.."</span> <span style="color: #65d5a8;">"/."</span> <span style="color: #65d5a8;">"/.git"</span>)) <span style="color: #65d5a8;">"$"</span>))
  <span style="color: #99bfcf; font-style: italic;">"Pattern to filter out dirs during traversal."</span>)

(<span style="color: #70a0ff; font-weight: bold;">defsubst</span> <span style="color: #7fce5f;">ems--subdirs</span> (d)
  <span style="color: #99bfcf; font-style: italic;">"Return list of subdirs in directory d"</span>
  (cl-remove-if-not #'file-directory-p (cddr (directory-files d 'full))))

(<span style="color: #70a0ff; font-weight: bold;">defun</span> <span style="color: #7fce5f;">ems--subdirs-recursively</span> (d)
  <span style="color: #99bfcf; font-style: italic;">"Recursive list of  subdirs"</span>
  (<span style="color: #70a0ff; font-weight: bold;">cl-declare</span> (special ems--subdirs-filter))
  (<span style="color: #70a0ff; font-weight: bold;">let</span> ((result (list d))
        (subdirs (ems--subdirs d)))
    (<span style="color: #70a0ff; font-weight: bold;">cond</span>
     ((string-match ems--subdirs-filter d) nil)                              <span style="color: #eaa4a4; font-style: italic;">; </span><span style="color: #eaa4a4; font-style: italic;">pass</span>
     (t
      (<span style="color: #70a0ff; font-weight: bold;">cl-loop</span>
       for dir in subdirs
       if (not (string-match ems--subdirs-filter dir)) do
       (<span style="color: #70a0ff; font-weight: bold;">setq</span> result  (nconc result (ems--subdirs-recursively dir))))))
    result))


</pre>
</div>
</div>
</div>
</div>
</div>