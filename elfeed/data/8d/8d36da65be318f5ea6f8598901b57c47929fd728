<p>I'm proud to announce that Hurl is officially released and done!
You can check out the docs on <a href="https://hurl.wtf">hurl.wtf</a>.</p>
<p>The language itself came out of an interesting question: Python <em>sometimes</em> uses exceptions for control flow, so could we implement a language that eschews normal control flow and <em>only</em> uses exceptions?
The answer is yes, and it produces a language that's less bad to use than I expected<sup class="footnote-reference"><a href="#still-bad-tho">1</a></sup>!</p>
<p>In the process of implementing it, I learned a lot.
Next year I'm going to try to make another language to learn about type systems, and that one should be more normal (but no promises).
Here are a few of my main takeaways from building Hurl.</p>
<h1 id="working-without-control-flow-is-fine">Working without control flow is... fine?</h1>
<p>I thought it would be totally mind bending to work without ordinary control flow.
The first couple of programs <em>were</em> mind bending but then you just learn the common patterns.
If you need to do an if-else, that's a <code>catch (true) ... catch (false)</code>.
Looping is harder to wrap your head around but it's also not so bad.</p>
<p>And the thing is, this is a general purpose programming language, so we can <em>build</em> this control flow.
I ended up with a function called <code>if</code> that takes a condition function and a body function as variables, and it runs those.
So you can write code like:</p>
<pre data-lang="hurl" class="language-hurl "><code class="language-hurl" data-lang="hurl">if(func() {
  hurl year == 2023;
}, func() {
  println(&quot;Hurl was written in 2023!&quot;);
});
</code></pre>
<p>It's not as clean as an <code>if</code> in reasonable languages, but it's also cleaner than I expected.
Part of this is also because I used dynamic scope, not lexical scope, so functions can operate more easily over outer scopes, but it would be doable either way with minor changes.</p>
<p>This has me really excited to explore things like <a href="https://en.wikipedia.org/wiki/Assembly_language">assembly</a>.
I've been really intimidated by it my entire career, feeling inadequate and all the usual impostor feelings.
But now I can see concretely that eschewing normal control flow won't be a problem in itself<sup class="footnote-reference"><a href="#assembly">2</a></sup>.
I've had <a href="http://www.riscvbook.com/">The RISC-V Reader</a> on my desk for a while and now it seems more approachable.</p>
<p>An unexpected lesson for me, but I'll take it.
So expect to see some RISC-V content next year!</p>
<h1 id="all-the-nice-things-are-so-hard">All the nice things are so hard</h1>
<p>My ambitions for Hurl were larger than my skills and time allowed for, and I had to pare it back.
The things that got cut were any of the tools that would make the language fairly nice to use, and error messages unfortunately went by the wayside.</p>
<p>I realized this would be harder than expected when I started <a href="/blog/writing-basic-code-formatter/">writing the formatter</a> and then I started to rethink some of the other ambitions I had.</p>
<p>In a future language I <em>will</em> come back to some of these things.
I'd love to write a slightly more sophisticated formatter that makes things a little prettier (though having one at all is an accomplishment I'm proud of).
And I am really interested in exploring writing a <a href="https://en.wikipedia.org/wiki/Language_Server_Protocol">language server</a> for a homemade language next year, but this year I just could not work on it.</p>
<p>The big thing I have a lot of appreciation for now is the quality of error messages and debugging support in other languages.
Generating error messages that point to where the error happened in the executing program requires that you track all the line information at run time!
And that means you have to design it in from the beginning.
Guess who didn't realize that and made some mistakes that would've been trouble to fix later?</p>
<p>Yeah, all those things that make a language nice to use are just a <em>lot</em> of work.
And my promise (to myself, to you) is that my next language will work at these and the goal will to be fairly pleasant to use as far as educational language projects go.</p>
<h1 id="writing-your-own-parser-tokenizer-can-makes-sense">Writing your own parser/tokenizer can makes sense</h1>
<p>After working through <a href="https://craftinginterpreters.com/">Crafting Interpreters</a> in 2022<sup class="footnote-reference"><a href="#crafting-interpreters">3</a></sup> where we implemented the tokenizer and parser from hand, I left with the impression that this was an intentional choice for instruction but perhaps not how we'd do it for real.
Since then I've learned that a great many languages <em>do</em> roll their own tokenizers and parsers, and I still wasn't sure why.</p>
<p>I used <a href="https://pest.rs">pest</a> to generate my parser for Hurl, and in a lot of ways it was pleasant to use.
But on the other hand, it felt fairly restrictive and it was a lot to learn.
In the end, I'm not sure that I saved time over writing my own parser.</p>
<p>If you write your own tokenizer and parser, you get full control and you avoid adding another dependency.
They're also not that difficult to write (but there are a lot of details to get right, so they're tricky to get fully correct).</p>
<p>I would probably use <code>pest</code> again for a real project<sup class="footnote-reference"><a href="#am-i-the-work-pest">4</a></sup> and it's used by some quite respectable projects like <a href="https://github.com/rust-lang/mdBook">mdbook</a>.
But for for my next language, I'm going to write my own tokenizer and parser again.
It's pretty fun, I don't think it'll cost me much time, and yeah why not?</p>
<h1 id="relying-on-the-os-stack-was-a-big-mistake">Relying on the OS stack was a big mistake</h1>
<p>I implemented a tree-walk interpreter, and recursion<sup class="footnote-reference"><a href="#dont-blame-rc">5</a></sup> is the only way you get looping, which results in a problem: as you loop, you push onto the stack and you get stack overflows.
And it's the <em>OS</em> provided stack for the <em>interpreter</em> which you end up blowing, so this isn't something we can just patch in Hurl itself.
This isn't something I thought through critically before deciding to do a tree-walk interpreter.
I knew that these are limited in some ways, but forgot how it would impact Hurl.</p>
<p>One solution here would be to migrate to a bytecode interpreter.
That's a big project and would be a rewrite of the whole interpreter, so it's not in the cards.
There might also be a way to optimize out some of the recursion here and create a loop from something tail recursive, but I don't know.</p>
<p>Another solution would be to add a new language construct.
I'm not sure which language construct would help us out here, so it's an undetermined thing at the moment.</p>
<p>In the future, I'll make sure to account for this from the beginning and use a bytecode interpreter approach, or transpile to another language.</p>
<h1 id="licenses-can-be-fun">Licenses can be fun</h1>
<p>Software licenses don't have a reputation for being particularly, uh, exciting<sup class="footnote-reference"><a href="#license-love">6</a></sup>.
But they don't have to be boring!
They can be an opportunity for play, too.</p>
<p>Part of creating Hurl is art, and the license choice is a big part of that.
The <em>best</em> license choice would have been an OSS license and then later do a rug pull and <a href="https://www.hashicorp.com/blog/hashicorp-adopts-business-source-license">relicense as BSL</a>, but that would imply that this project would get any attention.
The <em>second</em> best license choice was to lean into my values intentionally.
I ultimately decided to pick a license that would:</p>
<ul>
<li>permit funny outcomes</li>
<li>allow educational use</li>
<li>reflect my morality and ethics</li>
</ul>
<p>And to do this I settled on not just a license.
Not dual licenses.
No, that would make sense.</p>
<p>Hurl is <em>triple</em> licensed.</p>
<p>You can choose which of the licenses applies.
You've got the standard AGPL-3.0 (no &quot;or later&quot; here, I don't want to be bound to the FSF).
You've also got the choice to buy a commercial license (serious inquiries only 😉).
Or you can use it under GAL-1.0 (the Gay Agenda License 1.0).
Here's that license, in its full glory<sup class="footnote-reference"><a href="#anti-license">7</a></sup>:</p>
<pre data-lang="text" class="language-text "><code class="language-text" data-lang="text"># Gay Agenda License - 1.0

Copyright (c) 2023 Nicole Tietz-Sokolskaya &lt;me@ntietz.com&gt;

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and&#x2F;or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

  - The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
  - The grantee shall actively support rights for all LGBTQ+ people, respecting
    their gender identities.
  - The grantee shall say &quot;be gay, do crime&quot; at least once during use of the
    software.

The license is immediately revoked if the grantee supports restricting the
rights of LGBTQ+ people.

If the grantee is found to not have said &quot;be gay, do crime&quot; during use of the
software, the grantee has thirty (30) days to remediate this violation without
loss of the license. If it is not remediated, then the grantee&#x27;s grants via
this license are premanently retracted.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</code></pre>
<p>Feel free to use this software for your own projects, with a few caveats.
It was modified from the MIT license, so most of it is boilerplate, with a couple of additions to it.
The main thing to note if you do for some reason decide to use this license is that it is <em>not tested</em> and I would probably be surprised if it's enforceable.
No lawyer has been involved or harmed in its creation.</p>
<p>At the end of the day, though, what license <em>is</em> enforceable if you don't have the money to fight Amazon on it?</p>
<h1 id="playing-is-very-educational">Playing is very educational</h1>
<p>This was the biggest takeaway.
It's not new to me, and I've written before that you should <a href="/blog/write-more-useless-software/">write more &quot;useless&quot; software</a>.
It was a great reminder of the joy and learning that can come from a long project that's <em>just</em> for fun and that has no practical value.</p>
<p>Along the way, I had a lot of fun.
I'm not sure if I made friends or enemies.
And I sure did learn a <em>lot</em>.
Some of what I learned, I can apply at work starting this week<sup class="footnote-reference"><a href="#jessica">8</a></sup>!
And some of it is just added context for why certain things are hard, and makes me more deeply appreciate the tools that our dear language teams give us ❤️.</p>
<p>Go forth and write some playful code!</p>
<hr />
<div class="footnote-definition" id="still-bad-tho"><sup class="footnote-definition-label">1</sup>
<p>It is still <em>pretty bad</em> to use, though.</p>
</div>
<div class="footnote-definition" id="assembly"><sup class="footnote-definition-label">2</sup>
<p>In fact, assembly might get us a little closer to ordinary control flow than Hurl does.</p>
</div>
<div class="footnote-definition" id="crafting-interpreters"><sup class="footnote-definition-label">3</sup>
<p><em>Highly</em> recommend this magnificent tome if you want to learn from a professional language person. And his illustrations are beautiful!</p>
</div>
<div class="footnote-definition" id="am-i-the-work-pest"><sup class="footnote-definition-label">4</sup>
<p>I do have something brewing at work that will possibly use it, or <a href="https://docs.rs/nom/latest/nom/">nom</a>.</p>
</div>
<div class="footnote-definition" id="dont-blame-rc"><sup class="footnote-definition-label">5</sup>
<p>Despite the relation of names, <a href="https://recurse.com">the Recurse Center</a> has no fault in the creation of Hurl. The people there are quite lovely, and most don't implement languages like Hurl!</p>
</div>
<div class="footnote-definition" id="license-love"><sup class="footnote-definition-label">6</sup>
<p>To all my lawyer friends out there who are reading this and vehemently disagree, reach out to me, would love to chat.</p>
</div>
<div class="footnote-definition" id="anti-license"><sup class="footnote-definition-label">7</sup>
<p>This license was inspired by boringcactus's post <a href="https://www.boringcactus.com/2021/09/29/anti-license-manifesto.html">An Anti-License Manifesto</a>.</p>
</div>
<div class="footnote-definition" id="jessica"><sup class="footnote-definition-label">8</sup>
<p>Jessica, don't worry, I'm not going to actually <em>use</em> Hurl at work.</p>
</div>
