<p>
There&#39;s been discussion recently about current CS student&#39;s knowledge,
or lack thereof of hardware. The discussion was spurred when <a href="https://www.magesguild.io/the-decline-of-hardware-knowledge-in-the-era-of-cloud-native-compute/">this</a>
article made it&#39;s round in the CS Ed communities. My friend and fellow
CS Ed Blogger Alfred Thompson gave his take <a href="https://blog.acthompson.net/2023/12/how-much-hardware-knowledge-to-cs.html?spref=fb ">on his blog</a>. I thought I&#39;d
share mine here.</p>
<p>
First, let&#39;s get some definitions straight. The original article
wasn&#39;t really talking about hardware. The author was really talking
about what I&#39;d call &#34;low level&#34; computer and programming
concepts. Things like bit level operations, the internals of memory
management and in fact memory management altogether, and things like
interrupts and how system calls work.</p>
<p>
When we&#39;re talking hardware, we could be talking about a couple of
things. It could be Information Technology (IT) hardware - putting
together computers. Knowing interface standards like EIDE or the older
SCSI. Networking technologies. We could also be talking about things
that should be covered in robotics - wiring and programming an ATMEL, the
processor under the hood on an arduino directly to control a device
for example. Robotics, however, at the K12 level is usually more of an
intro programming class with physical output instead of merely visual
on a screen.</p>
<p>
The question that arose was this: should any of these be covered in
K12?</p>
<p>
Let&#39;s look at each in turn.</p>
<p>
IT Hardware? Probably not, at least not across the board in all CS
classes. Building computers and wiring your own networks were big in
the 90s and turn of the century. Not so much anymore. You used to be
able to purchase components at a variety of places but now, vendors
have dwindled. At the same time, the market has consolidated and moved
more towards laptops or smaller - platforms students can&#39;t easily work
on. On the other hand, this can be and should be a fun and great
elective.</p>
<p>
Low level robotics type hardware? Also, not in required classes but
would be a great elective.</p>
<p>
That brings us to the low level programming concepts. Once again, as
an elective this can be great. In addition to covering some of this in
the classes I designed at Stuy, I created and offered a System Level
programming class that covered a lot of this. It was popular among the
CS students and from what I was told, super worthwhile for those who
went on to study CS or a related field in college.</p>
<p>
What about for everyone else?</p>
<p>
That&#39;s the question. On the one hand, time is very limited. If a
school offers or requires CS it might just be one semester or one
year. You can&#39;t cover everything in that amount of time. Also, as
Alfred pointed out in his post, we don&#39;t currently even have nearly
enough knowledgable K12 CS teachers to teach the basics.</p>
<p>
I&#39;d like to try to make a case though for including some of it.</p>
<p>
Even though everyone uses computers these days, they can certainly be
intimidating and feel like magic. People have no idea how they work. I
joke with my students that if they unplug the keyboard quickly while
typing they can shake some characters out of the cable. Teaching some
low level CS concepts can demystify computers. Take away the
fear. Just as learning some programming and algorithms can demystify
the &#34;magic&#34; of recommendation systems and high level wonders, some low
level knowledge can demytify how these computer things work inthe
first place.</p>
<p>
I&#39;m not talking about going all <a href="https://www.nand2tetris.org/">Nand to Tetris</a>. I&#39;m also not talking
about dropping in topics out of context. The College Board did this
famously with binary, decimal, and hex. Without context it&#39;s
meaningless and worthless. Hunter, where I last taught did the same
thing. They required binary, decimal, and hex in their CS0 course. I
ignored it. The argument the professors gave was that the kids needed
it when they took their first systems/architecture course. I asked
them, &#34;well, for all the students in all the other CS0 classes, they
did cover the topic, did it really help?&#34; The answer was &#34;no, they all
forgot and we had to reteach it.&#34; So much for it being important in
CS0.</p>
<p>
I&#39;m talking about a unit where you can get far enough to understand
something memorable. I brought a bunch of HS students to a 45 minute
talk once explaining how solid state memory worked. These kids had
zero background and the speaker kept things at an informal level but
after the 45 minutes, those kids understood at a basic level, how a
flash drive stored information.</p>
<p>
Another example is a unit developed for my intro course. The heavy
lifting was done by a colleague and friend of mine - I can&#39;t take the
credit. The unit centered around a small assembly interpreter that he
designed and built a web emulator for. Kids learned some logic gates,
how you could do arithmetic and were also able to see how memory
worked. The kids got to look behind the curtain. Sure, their laptop
was a bazillion times more complicated but at their cores the same
things were happening.</p>
<p>
Now, the rub comes with resources and bang for your buck. Can you
spend a couple of week on something like that? Do you have teachers
who know enough to do it? If you do it, what other topic(s) can&#39;t you
cover.</p>
<p>
If you&#39;ve only got one semester with the kids, you&#39;ve got to call your
shots. I can&#39;t say that low level CS is the most important thing to
cover there but when there is time, I think it&#39;s certainly
worthwhile. On the other hand, if you have a year or more with your
students, I&#39;m pretty sure a creative teacher can come up with a way to
get the basics in.</p>