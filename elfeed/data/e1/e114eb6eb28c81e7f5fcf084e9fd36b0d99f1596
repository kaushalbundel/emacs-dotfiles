<p>Earlier this week, I ran into a confusing situation with lifetimes and the borrow checker while working on my <a href="https://craftinginterpreters.com/the-lox-language.html">Lox</a> interpreter.
It took me a little while to figure out, and it's an instructive situation.</p>
<p>Here's a reduced-down version of what I was working on.
It's an interpreter, so there is a scanner which produces tokens.
Ideally these tokens are references back into the underlying original string so that you can avoid any more memory allocation.</p>
<p>Simple enough, I thought, so I implemented a <code>Scanner</code> which produced <code>Tokens</code>:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">&#x2F;&#x2F;&#x2F; An overly simplified Scanner, containing just
&#x2F;&#x2F;&#x2F; enough fields to produce fake tokens.
struct Scanner&lt;&#x27;source&gt; {
    source: &amp;&#x27;source str,
    count: usize,
}

&#x2F;&#x2F;&#x2F; An overly simplified Token, containing just
&#x2F;&#x2F;&#x2F; a reference to a str to reproduce the error.
struct Token&lt;&#x27;source&gt; {
    lexeme: &amp;&#x27;source str,
}

impl Scanner&lt;&#x27;_&gt; {
    &#x2F;&#x2F;&#x2F; next_token produces a fake token which
    &#x2F;&#x2F;&#x2F; reproduces the error; you&#x27;d want to do
    &#x2F;&#x2F;&#x2F; some real scanning here, of course!
    pub fn next_token(&amp;mut self) -&gt; Token {
        self.count += 1;
        Token { lexeme: self.source }
    }
}

fn main() {
    let source = &quot;x = 10&quot;;
    let mut scanner = Scanner { source, count: 0 };

    let token = scanner.next_token();
    println!(&quot;token: {}&quot;, token.lexeme);
}
</code></pre>
<p>This compiles, and it has a sprinkling of named lifetimes within it.
Those are important so that the compiler can reason about how long the references will live.
If you have a reference in a struct, it always needs a lifetime annotation, unless it falls under one of the three lifetime elision rules, which we'll get to.</p>
<p>For now, though, let's do something more with our scanner.
We'll get a second token in <code>main</code>, the way you might see in a parser where you keep the current and previous tokens:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">fn main() {
    let source = &quot;x = 10&quot;;
    let mut scanner = Scanner { source, count: 0 };

    let previous = scanner.next_token();
    let current = scanner.next_token();

    println!(&quot;previous: {}&quot;, previous.lexeme);
    println!(&quot;current: {}&quot;, current.lexeme);
}
</code></pre>
<p>Now this looks like it <em>should</em> work, since all the tokens will live as long as the source, which lives as long as the main function does.
However, we get this output when we try to compile it:</p>
<pre><code>error[E0499]: cannot borrow `scanner` as mutable more than once at a time
  --&gt; lifetime.rs:29:19
   |
28 |     let previous = scanner.next_token();
   |                    -------------------- first mutable borrow occurs here
29 |     let current = scanner.next_token();
   |                   ^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here
30 |
31 |     println!(&quot;previous: {}&quot;, previous.lexeme);
   |                              --------------- first borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc --explain E0499`.
</code></pre>
<p>Somehow, we're trying to hold onto two mutable references to <code>scanner</code> at the same time!
But why?</p>
<p>It comes down to those lifetime elision rules.
There are <a href="https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision">three lifetime elision rules</a>, which apply to both <code>impl</code> blocks and <code>fn</code>s:</p>
<ol>
<li>Each parameter that's a reference gets a lifetime. These are <em>input</em> lifetimes.</li>
<li>If there's exactly one input lifetime parameter, that lifetime is used for all <em>output</em> lifetimes.</li>
<li>If there are multiple input lifetime parameters but one is <code>&amp;self</code> or <code>&amp;mut self</code>, the <code>self</code> lifetime &quot;wins&quot; and is used for all output lifetimes.</li>
</ol>
<p>So what's happening here is that <code>next_token</code> gets implicit lifetimes assigned to it, and those end up forcing a longer lifetime than we really need <em>on the borrow</em>.
To understand it, we can write out what the elision rules would do for us.
We apply rule 1 to know that we'll need an input lifetime for both <code>self</code> (let's call it <code>'scanner</code>) and for the source/lexeme (let's call it <code>'source</code>).
We also know from rule 3 that since <code>Token</code> has a lifetime parameter and is returned, it will be the same as the reference itself.</p>
<p>So we end up with this:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">impl&lt;&#x27;source, &#x27;scanner&gt; Scanner&lt;&#x27;source&gt; {
    &#x2F;&#x2F;&#x2F; next_token produces a fake token which
    &#x2F;&#x2F;&#x2F; reproduces the error; you&#x27;d want to do
    &#x2F;&#x2F;&#x2F; some real scanning here, of course!
    pub fn next_token(&amp;&#x27;scanner mut self) -&gt; Token&lt;&#x27;scanner&gt; {
        self.count += 1;
        Token { lexeme: self.source }
    }
}
</code></pre>
<p>If we compile it with this implementation instead, we get <em>the same compiler error</em>.
But this is <strong>clearly not what we want</strong>: we don't want tokens to live as long as the <em>reference</em> to the scanner, we want them to live as long as the <em>source</em>!
Since their lifetime is linked to the mutable reference to the scanner, it forces that reference to be held for at least as long as the tokens are.</p>
<p>We can fix this pretty simply by instead annotating with the correct lifetime on the returned <code>Token</code>.
You can also omit the <code>'scanner</code> lifetime, but I chose to leave it in here to be a little more explicit for clarity in this example.</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">impl&lt;&#x27;source, &#x27;scanner&gt; Scanner&lt;&#x27;source&gt; {
    &#x2F;&#x2F;&#x2F; next_token produces a fake token which
    &#x2F;&#x2F;&#x2F; reproduces the error; you&#x27;d want to do
    &#x2F;&#x2F;&#x2F; some real scanning here, of course!
    pub fn next_token(&amp;&#x27;scanner mut self) -&gt; Token&lt;&#x27;source&gt; {
        self.count += 1;
        Token { lexeme: self.source }
    }
}
</code></pre>
<p>And with that small change, the whole thing compiles!
Of course, in retrospect, it's really clear that I <em>should</em> have specified the lifetime parameter for <code>Token</code> in the first place, but you live and learn.</p>
