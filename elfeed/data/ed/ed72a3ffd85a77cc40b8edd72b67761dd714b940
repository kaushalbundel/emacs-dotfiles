<p>Units are a key part of doing any calculation.
A number on its own is just a scalar and doesn't represent anything in particular.
If I tell you to go drive 5, you'd naturally ask &quot;5 what?&quot;</p>
<p>Software often has to deal with quantities that represent real-world things.
How we represent these quantities in different languages is an interesting window into how those languages represent and interact with these quantities.
A common one we run into is the representation of <strong>time</strong>.
Nearly every program will eventually need to deal with time, even just to do a little sleeping (as a treat).</p>
<p>Let's compare how Go and Rust represent units of time!
Specifically, we'll look at how they represent durations of time for things like thread sleeps.
For this, we'll look primarily at the standard library; other libraries may do it differently, but this is a somewhat &quot;blessed&quot; path, and the world of libraries is so vast.
The standard libraries also are more likely to represent idiomatic usage<sup class="footnote-reference"><a href="#1">1</a></sup>.</p>
<h1 id="go">Go</h1>
<p>Let's start with Go.
Times use the package <a href="https://pkg.go.dev/time">time</a>.
Specifically, this package defines the type <code>Duration</code>, which represents elapsed time between two instants.
It's defined as an integer, representing elapsed nanoseconds.
Here's the full definition of the type:</p>
<pre data-lang="go" class="language-go "><code class="language-go" data-lang="go">type Duration int64
</code></pre>
<p>There are also some constants provided: <code>Nanosecond</code>, <code>Microsecond</code>, <code>Millisecond</code>, <code>Second</code>, <code>Minute</code>, and <code>Hour</code>.
These give easy constants to allow easily constructing durations.</p>
<p>Here is the example of printing out a 10-second duration from the <a href="https://pkg.go.dev/time#pkg-constants">docs</a>:</p>
<pre data-lang="go" class="language-go "><code class="language-go" data-lang="go">seconds := 10
fmt.Print(time.Duration(seconds)*time.Second) &#x2F;&#x2F; prints 10s
</code></pre>
<p>We create a <code>time.Duration</code> (casting the input int, 10, into a <code>Duration</code>), which represents 10 nanoseconds.
When we multiply it by <code>time.Second</code>, we are multiplying by the number of nanoseconds in a second, which scales the duration to represent 10 seconds.</p>
<p>At all times, a <code>Duration</code> is <em>just</em> an int, which largely means you can use it like an int (but may have to cast it sometimes).
You can do all the usual integer things, like adding other integers and multiplying by other integers.</p>
<p>The same example as above can be represented using integer math:</p>
<pre data-lang="go" class="language-go "><code class="language-go" data-lang="go">duration := time.Second * 10
fmt.Print(duration) &#x2F;&#x2F; prints 10s
</code></pre>
<p>And you could add, here representing 1.00000001s:</p>
<pre data-lang="go" class="language-go "><code class="language-go" data-lang="go">duration := time.Second + 10
fmt.Print(duration) &#x2F;&#x2F; prints 1.00000001s
</code></pre>
<h1 id="rust">Rust</h1>
<p>Rust takes a different approach.
Times are in the package <a href="https://doc.rust-lang.org/stable/std/time/index.html">std::time</a>.
Within this package, we have <a href="https://doc.rust-lang.org/stable/std/time/struct.Duration.html">Duration</a>.</p>
<p>This type is more complicated in its definition, as it is a struct.
In fact, the docs do not tell us what the internal representation is, just giving us:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">pub struct Duration { &#x2F;* private fields *&#x2F; }
</code></pre>
<p>If we look at the source code, we can see that it doesn't contain very much:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">&#x2F;&#x2F; some attributes are skipped for clarity

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
pub struct Duration {
    secs: u64,
    nanos: Nanoseconds, &#x2F;&#x2F; Always 0 &lt;= nanos &lt; NANOS_PER_SEC
}

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
struct Nanoseconds(u32);
</code></pre>
<p>This differs significantly from the Go definition in two ways:</p>
<ul>
<li>It's storing seconds (and nanoseconds for sub-second precision), not nanoseconds</li>
<li>It's stored in a structured way, rather than as an integer that you can use as an integer</li>
</ul>
<p>You construct <code>Duration</code>s using struct methods.
For example, you can make 10 seconds using <code>Duration::from_secs(10)</code>.</p>
<p>Here's the same example as above, adapted for Rust:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">let seconds = Duration::from_secs(10);
println!(&quot;{:?}&quot;);
</code></pre>
<p>However, the arithmetic operators are not all defined here with integers!
You can multiply a duration by an integer, which makes sense: we know that 1 second times a unitless 10 is 10 seconds.
But what does it mean to add a unitless 10 to 1 second?
It doesn't mean anything, and if you try you get an error message saying that the operation isn't defined.</p>
<h1 id="philosophical-differences">Philosophical differences</h1>
<p>Between Go and Rust, we see a philosophical difference.
Rust prefers to put the unit into the type system, preventing errors by enforcing that usage goes through the implemented interface.
In contrast, Go prefers to document the unit and use a relatively bare type definition but placing fewer restrictions on the programmer.
Rust makes things explicit; Go allows things to be implicit.</p>
<p>These are philosophical differences, not limitations or enhancements afforded by either language, because both approaches can be implemented in either language.
You could define a similar <code>Duration</code> struct in Go, like so:</p>
<pre data-lang="go" class="language-go "><code class="language-go" data-lang="go">type Duration struct {
    secs int64
    nanos int32
}
</code></pre>
<p>And in Rust, we could define <code>Duration</code> as a type alias, similar to what was done in Go:</p>
<pre data-lang="rust" class="language-rust "><code class="language-rust" data-lang="rust">type Duration = u64;
</code></pre>
<p>This example reflects a lot of my feelings and experiences using both of these languages in general.
They're great tools that excel in overlapping domains, and they come at it from different angles.
Go tends to feel like it expects the programmer to be diligent and careful, and it gives you footguns (though notably fewer than C or C++, which I'm thankful about).
Rust tends to feel like it's working hard to prevent the programmer from making mistakes, which can be very comforting and can also feel awfully restrictive sometimes.</p>
<p>I'm <em>extremely</em> thankful that Rust is restrictive about memory accesses to prevent pernicious memory bugs.
This sort of handling of unit bugs could also help prevent <a href="https://en.wikipedia.org/wiki/Mars_Climate_Orbiter#Cause_of_failure">bugs that crash space probes</a>.
But we're not all writing systems software or Mars orbiters, and this can feel like overkill sometimes.</p>
<p>To me, the Rust approach feels better, because it lives up to the promise of code being self-documenting and it helps prevent mistakes in codebases we don't understand.
And let's be honest, we don't understand <em>most</em> of the codebases we work in, because they're too large for any one human to fit in their head, let alone their working memory.
My opinion is that the more things we can push onto the compiler, the more we free up cognitive resources to actually think about the problems we're solving.</p>
<p>The Rust approach isn't <em>quite</em> there to me, because a lot of extra complexity comes along for the ride.
I overheard someone describe it recently as a language that has both a systems programming community and a fancy programming language community.
It feels like there's a lot of baggage from the latter that doesn't necessarily improve the overall use of the language.
It's still a really fun language, but I am also optimistic that we may get something even better in the future:
Something cleaner and easier, which still affords the most important protections that Rust provides.</p>
<hr />
<p>Post notes: I think there are also some important things to say about the cultural differences between the Go and Rust communities.
But, I don't think I'm the person to say them.
I'm largely on the outside of both communities, because I don't spend a lot of time talking about the languages with other people; just using them, and collaborating in work and hobby contexts.
Both communities have great strengths and tragic flaws.
Just like the languages.</p>
<hr />
<div class="footnote-definition" id="1"><sup class="footnote-definition-label">1</sup>
<p>That said, standard libraries are also slower to change than practices may be, so idiomatic use can shift out from under them. But I think it's a reasonable basis, because it's what a lot of users will look to and will seek to remain compatible with.</p>
</div>
