<p>
It&#39;s that time again. <a href="https://adventofcode.com/">Advent of Code</a> 2023. A new two part programming
problem each day from now through December 25th.</p>
<p>
Since 2015 I&#39;ve looked forward to the event, taken part, and posted at
least a few write ups here on my blog. I figured this year would be
the same.</p>
<p>
Of course, it does end up putting a crunch in my routine. Usually each
morning I wake up, work out, usually a run unless the weather&#39;s bad,
have my coffee, do the puzzle, read blogs and other content over
breakfast and then I&#39;m ready for the rest of my day.</p>
<p>
Advent of Code adds another morning activity. Actually, maybe not this
year since I broke a toe last week and am not allowed to work out for
the foreseeable future.</p>
<p>
So, this morning, I woke up, made coffee, worked on the puzzle (not
quite done yet) and then looked at <a href="https://adventofcode.com/2023/day/1">today&#39;s problem</a>. </p>
<p>
To be honest, I was a little surprised. After reading it it seemed
somewhat harder than past day 1 questions. It might have to do with
the fact that I haven&#39;t programmed at all since last years event and
really not much in the past couple of years but still.</p>
<p>
Usually the first days problem involves some straight through
processing of the data without a whole lot of thought. After I
completed today&#39;s problem I looked back on past years adn actually,
while this one is a bit more involved, it really isn&#39;t that different.</p>
<p>
Part 1 of today&#39;s problem was a straightforward as past year. You&#39;ve
got a bunch of lines each with some digits interspersed:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1bcc2
</span></span><span style="display:flex;"><span>a1b2c3fgh4
</span></span><span style="display:flex;"><span>etc.</span></span></code></pre></div>
</div>
<p>
You have to find the first and last digits in each line and take them
as a number. For the above you&#39;d have 12 for the first line and 14 for
the second. You then had to sum all of those numbers up.</p>
<p>
I thought the most straightforward way to do this was to go through
the data and keep only the digits.</p>
<p>
While I wrote my solution in Clojure, in Python for each line you
could use an expression like this:</p>
<div class="src src-python">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[x <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> l <span style="color:#66d9ef">if</span> x<span style="color:#f92672">&gt;</span><span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">and</span> x<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;9&#39;</span>]</span></span></code></pre></div>
</div>
<p>
Then you can just take the first and last items in the list, put them
together and convert to a number:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>int(x[0]+x[-1])</span></span></code></pre></div>
</div>
<p>
Finally, add all the lines together and you&#39;re done.</p>
<p>
Part 2 threw a wrench in the works.</p>
<p>
Now, in addition to the digits counting as digits, spelled out digits
(one, two, etc.) had to count as digits as well. Looking at the sample
data, no problem:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>two1nine
</span></span><span style="display:flex;"><span>eightwothree
</span></span><span style="display:flex;"><span>abcone2threexyz
</span></span><span style="display:flex;"><span>xtwone3four
</span></span><span style="display:flex;"><span>4nineeightseven2
</span></span><span style="display:flex;"><span>zoneight234
</span></span><span style="display:flex;"><span>7pqrstsixteen</span></span></code></pre></div>
</div>
<p>
One could just replace all occurences of &#34;one&#34; with &#34;1,&#34; &#34;two&#34; with
&#34;2,&#34; and so on.</p>
<p>
The catch was that you could also have overlapping numbers:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>9oneighthree9</span></span></code></pre></div>
</div>
<p>
Should that be converted to &#34;91839,&#34; &#34;91igh39,&#34; &#34;9on8hree9,&#34; or
&#34;91839.&#34;</p>
<p>
This made things trickier - first, how do you interpret it and then
how do you solve.</p>
<p>
It turned out that you had to allow for overlapping words so the above
example would translate to 91839.</p>
<p>
My solution, in Clojure, which you can find <a href="https://gitlab.com/zamansky/advent2023/-/blob/main/src/day01.clj?ref_type=heads">here</a> involves using
overlapping regular expressions - I didn&#39;t know about them so it took
a while to figure that out.</p>
<p>
Another approach, at least I think would be to replace the strings one
at a time (first do the &#34;one&#34; occurences, then &#34;two&#34; etc.) but replace
them with the digit within the original text. So, &#34;one&#34; would be
replaced by &#34;o1ne&#34; or something similar. This way, if the final &#34;e&#34;
was next to an &#34;ight&#34; you&#39;d get that &#34;eight&#34; when you replaced for
&#34;eight.&#34;</p>
<p>
All of this isn&#39;t too bad but probably required more thought than your
typical advent of code day 1.</p>
<p>
Still, a fun morning activity.</p>